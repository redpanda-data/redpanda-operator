// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// SchemaReferenceApplyConfiguration represents an declarative configuration of the SchemaReference type for use
// with apply.
type SchemaReferenceApplyConfiguration struct {
	Name    *string `json:"name,omitempty"`
	Subject *string `json:"subject,omitempty"`
	Version *int    `json:"version,omitempty"`
}

// SchemaReferenceApplyConfiguration constructs an declarative configuration of the SchemaReference type for use with
// apply.
func SchemaReference() *SchemaReferenceApplyConfiguration {
	return &SchemaReferenceApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *SchemaReferenceApplyConfiguration) WithName(value string) *SchemaReferenceApplyConfiguration {
	b.Name = &value
	return b
}

// WithSubject sets the Subject field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subject field is set to the value of the last call.
func (b *SchemaReferenceApplyConfiguration) WithSubject(value string) *SchemaReferenceApplyConfiguration {
	b.Subject = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *SchemaReferenceApplyConfiguration) WithVersion(value int) *SchemaReferenceApplyConfiguration {
	b.Version = &value
	return b
}
