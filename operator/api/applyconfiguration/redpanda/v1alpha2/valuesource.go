// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/api/core/v1"
)

// ValueSourceApplyConfiguration represents a declarative configuration of the ValueSource type for use
// with apply.
type ValueSourceApplyConfiguration struct {
	Inline                    *string                                      `json:"inline,omitempty"`
	ConfigMapKeyRef           *v1.ConfigMapKeySelector                     `json:"configMapKeyRef,omitempty"`
	SecretKeyRef              *v1.SecretKeySelector                        `json:"secretKeyRef,omitempty"`
	ExternalSecretRefSelector *ExternalSecretKeySelectorApplyConfiguration `json:"externalSecretRef,omitempty"`
}

// ValueSourceApplyConfiguration constructs a declarative configuration of the ValueSource type for use with
// apply.
func ValueSource() *ValueSourceApplyConfiguration {
	return &ValueSourceApplyConfiguration{}
}

// WithInline sets the Inline field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Inline field is set to the value of the last call.
func (b *ValueSourceApplyConfiguration) WithInline(value string) *ValueSourceApplyConfiguration {
	b.Inline = &value
	return b
}

// WithConfigMapKeyRef sets the ConfigMapKeyRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigMapKeyRef field is set to the value of the last call.
func (b *ValueSourceApplyConfiguration) WithConfigMapKeyRef(value v1.ConfigMapKeySelector) *ValueSourceApplyConfiguration {
	b.ConfigMapKeyRef = &value
	return b
}

// WithSecretKeyRef sets the SecretKeyRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretKeyRef field is set to the value of the last call.
func (b *ValueSourceApplyConfiguration) WithSecretKeyRef(value v1.SecretKeySelector) *ValueSourceApplyConfiguration {
	b.SecretKeyRef = &value
	return b
}

// WithExternalSecretRefSelector sets the ExternalSecretRefSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalSecretRefSelector field is set to the value of the last call.
func (b *ValueSourceApplyConfiguration) WithExternalSecretRefSelector(value *ExternalSecretKeySelectorApplyConfiguration) *ValueSourceApplyConfiguration {
	b.ExternalSecretRefSelector = value
	return b
}
