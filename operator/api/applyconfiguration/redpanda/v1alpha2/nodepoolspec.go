// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// NodePoolSpecApplyConfiguration represents a declarative configuration of the NodePoolSpec type for use
// with apply.
type NodePoolSpecApplyConfiguration struct {
	EmbeddedNodePoolSpecApplyConfiguration `json:",inline"`
	ClusterRef                             *ClusterRefApplyConfiguration `json:"clusterRef,omitempty"`
}

// NodePoolSpecApplyConfiguration constructs a declarative configuration of the NodePoolSpec type for use with
// apply.
func NodePoolSpec() *NodePoolSpecApplyConfiguration {
	return &NodePoolSpecApplyConfiguration{}
}

// WithAdditionalSelectorLabels puts the entries into the AdditionalSelectorLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AdditionalSelectorLabels field,
// overwriting an existing map entries in AdditionalSelectorLabels field with the same key.
func (b *NodePoolSpecApplyConfiguration) WithAdditionalSelectorLabels(entries map[string]string) *NodePoolSpecApplyConfiguration {
	if b.EmbeddedNodePoolSpecApplyConfiguration.AdditionalSelectorLabels == nil && len(entries) > 0 {
		b.EmbeddedNodePoolSpecApplyConfiguration.AdditionalSelectorLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.EmbeddedNodePoolSpecApplyConfiguration.AdditionalSelectorLabels[k] = v
	}
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithReplicas(value int32) *NodePoolSpecApplyConfiguration {
	b.EmbeddedNodePoolSpecApplyConfiguration.Replicas = &value
	return b
}

// WithAdditionalRedpandaCmdFlags adds the given value to the AdditionalRedpandaCmdFlags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalRedpandaCmdFlags field.
func (b *NodePoolSpecApplyConfiguration) WithAdditionalRedpandaCmdFlags(values ...string) *NodePoolSpecApplyConfiguration {
	for i := range values {
		b.EmbeddedNodePoolSpecApplyConfiguration.AdditionalRedpandaCmdFlags = append(b.EmbeddedNodePoolSpecApplyConfiguration.AdditionalRedpandaCmdFlags, values[i])
	}
	return b
}

// WithPodTemplate sets the PodTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodTemplate field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithPodTemplate(value *PodTemplateApplyConfiguration) *NodePoolSpecApplyConfiguration {
	b.EmbeddedNodePoolSpecApplyConfiguration.PodTemplate = value
	return b
}

// WithBudget sets the Budget field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Budget field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithBudget(value *BudgetApplyConfiguration) *NodePoolSpecApplyConfiguration {
	b.EmbeddedNodePoolSpecApplyConfiguration.Budget = value
	return b
}

// WithPodAntiAffinity sets the PodAntiAffinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodAntiAffinity field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithPodAntiAffinity(value *PodAntiAffinityApplyConfiguration) *NodePoolSpecApplyConfiguration {
	b.EmbeddedNodePoolSpecApplyConfiguration.PodAntiAffinity = value
	return b
}

// WithSidecars sets the Sidecars field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Sidecars field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithSidecars(value *SidecarsApplyConfiguration) *NodePoolSpecApplyConfiguration {
	b.EmbeddedNodePoolSpecApplyConfiguration.Sidecars = value
	return b
}

// WithInitContainers sets the InitContainers field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InitContainers field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithInitContainers(value *PoolInitContainersApplyConfiguration) *NodePoolSpecApplyConfiguration {
	b.EmbeddedNodePoolSpecApplyConfiguration.InitContainers = value
	return b
}

// WithClusterRef sets the ClusterRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterRef field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithClusterRef(value *ClusterRefApplyConfiguration) *NodePoolSpecApplyConfiguration {
	b.ClusterRef = value
	return b
}
