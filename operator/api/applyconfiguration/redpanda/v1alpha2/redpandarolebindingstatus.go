// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// RedpandaRoleBindingStatusApplyConfiguration represents a declarative configuration of the RedpandaRoleBindingStatus type for use
// with apply.
type RedpandaRoleBindingStatusApplyConfiguration struct {
	ObservedGeneration *int64                           `json:"observedGeneration,omitempty"`
	Conditions         []v1.ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// RedpandaRoleBindingStatusApplyConfiguration constructs a declarative configuration of the RedpandaRoleBindingStatus type for use with
// apply.
func RedpandaRoleBindingStatus() *RedpandaRoleBindingStatusApplyConfiguration {
	return &RedpandaRoleBindingStatusApplyConfiguration{}
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *RedpandaRoleBindingStatusApplyConfiguration) WithObservedGeneration(value int64) *RedpandaRoleBindingStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *RedpandaRoleBindingStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *RedpandaRoleBindingStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
