// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// CommonTLSApplyConfiguration represents an declarative configuration of the CommonTLS type for use
// with apply.
type CommonTLSApplyConfiguration struct {
	CaCert                *SecretKeyRefApplyConfiguration `json:"caCertSecretRef,omitempty"`
	Cert                  *SecretKeyRefApplyConfiguration `json:"certSecretRef,omitempty"`
	Key                   *SecretKeyRefApplyConfiguration `json:"keySecretRef,omitempty"`
	InsecureSkipTLSVerify *bool                           `json:"insecureSkipTlsVerify,omitempty"`
}

// CommonTLSApplyConfiguration constructs an declarative configuration of the CommonTLS type for use with
// apply.
func CommonTLS() *CommonTLSApplyConfiguration {
	return &CommonTLSApplyConfiguration{}
}

// WithCaCert sets the CaCert field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CaCert field is set to the value of the last call.
func (b *CommonTLSApplyConfiguration) WithCaCert(value *SecretKeyRefApplyConfiguration) *CommonTLSApplyConfiguration {
	b.CaCert = value
	return b
}

// WithCert sets the Cert field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cert field is set to the value of the last call.
func (b *CommonTLSApplyConfiguration) WithCert(value *SecretKeyRefApplyConfiguration) *CommonTLSApplyConfiguration {
	b.Cert = value
	return b
}

// WithKey sets the Key field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Key field is set to the value of the last call.
func (b *CommonTLSApplyConfiguration) WithKey(value *SecretKeyRefApplyConfiguration) *CommonTLSApplyConfiguration {
	b.Key = value
	return b
}

// WithInsecureSkipTLSVerify sets the InsecureSkipTLSVerify field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InsecureSkipTLSVerify field is set to the value of the last call.
func (b *CommonTLSApplyConfiguration) WithInsecureSkipTLSVerify(value bool) *CommonTLSApplyConfiguration {
	b.InsecureSkipTLSVerify = &value
	return b
}
