// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// ACLFilterApplyConfiguration represents a declarative configuration of the ACLFilter type for use
// with apply.
type ACLFilterApplyConfiguration struct {
	AccessFilter   *ACLAccessFilterApplyConfiguration   `json:"accessFilter,omitempty"`
	ResourceFilter *ACLResourceFilterApplyConfiguration `json:"resourceFilter,omitempty"`
}

// ACLFilterApplyConfiguration constructs a declarative configuration of the ACLFilter type for use with
// apply.
func ACLFilter() *ACLFilterApplyConfiguration {
	return &ACLFilterApplyConfiguration{}
}

// WithAccessFilter sets the AccessFilter field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AccessFilter field is set to the value of the last call.
func (b *ACLFilterApplyConfiguration) WithAccessFilter(value *ACLAccessFilterApplyConfiguration) *ACLFilterApplyConfiguration {
	b.AccessFilter = value
	return b
}

// WithResourceFilter sets the ResourceFilter field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceFilter field is set to the value of the last call.
func (b *ACLFilterApplyConfiguration) WithResourceFilter(value *ACLResourceFilterApplyConfiguration) *ACLFilterApplyConfiguration {
	b.ResourceFilter = value
	return b
}
