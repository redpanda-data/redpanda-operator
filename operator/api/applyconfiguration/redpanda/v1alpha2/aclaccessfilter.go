// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	redpandav1alpha2 "github.com/redpanda-data/redpanda-operator/operator/api/redpanda/v1alpha2"
)

// ACLAccessFilterApplyConfiguration represents a declarative configuration of the ACLAccessFilter type for use
// with apply.
type ACLAccessFilterApplyConfiguration struct {
	Host           *string                        `json:"host,omitempty"`
	Operation      *redpandav1alpha2.ACLOperation `json:"operation,omitempty"`
	PermissionType *redpandav1alpha2.ACLType      `json:"permissionType,omitempty"`
	Principal      *string                        `json:"principal,omitempty"`
}

// ACLAccessFilterApplyConfiguration constructs a declarative configuration of the ACLAccessFilter type for use with
// apply.
func ACLAccessFilter() *ACLAccessFilterApplyConfiguration {
	return &ACLAccessFilterApplyConfiguration{}
}

// WithHost sets the Host field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Host field is set to the value of the last call.
func (b *ACLAccessFilterApplyConfiguration) WithHost(value string) *ACLAccessFilterApplyConfiguration {
	b.Host = &value
	return b
}

// WithOperation sets the Operation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Operation field is set to the value of the last call.
func (b *ACLAccessFilterApplyConfiguration) WithOperation(value redpandav1alpha2.ACLOperation) *ACLAccessFilterApplyConfiguration {
	b.Operation = &value
	return b
}

// WithPermissionType sets the PermissionType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PermissionType field is set to the value of the last call.
func (b *ACLAccessFilterApplyConfiguration) WithPermissionType(value redpandav1alpha2.ACLType) *ACLAccessFilterApplyConfiguration {
	b.PermissionType = &value
	return b
}

// WithPrincipal sets the Principal field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Principal field is set to the value of the last call.
func (b *ACLAccessFilterApplyConfiguration) WithPrincipal(value string) *ACLAccessFilterApplyConfiguration {
	b.Principal = &value
	return b
}
