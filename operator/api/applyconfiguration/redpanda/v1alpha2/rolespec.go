// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// RoleSpecApplyConfiguration represents a declarative configuration of the RoleSpec type for use
// with apply.
type RoleSpecApplyConfiguration struct {
	ClusterSource *ClusterSourceApplyConfiguration         `json:"cluster,omitempty"`
	Principals    []string                                 `json:"principals,omitempty"`
	Authorization *RoleAuthorizationSpecApplyConfiguration `json:"authorization,omitempty"`
}

// RoleSpecApplyConfiguration constructs a declarative configuration of the RoleSpec type for use with
// apply.
func RoleSpec() *RoleSpecApplyConfiguration {
	return &RoleSpecApplyConfiguration{}
}

// WithClusterSource sets the ClusterSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterSource field is set to the value of the last call.
func (b *RoleSpecApplyConfiguration) WithClusterSource(value *ClusterSourceApplyConfiguration) *RoleSpecApplyConfiguration {
	b.ClusterSource = value
	return b
}

// WithPrincipals adds the given value to the Principals field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Principals field.
func (b *RoleSpecApplyConfiguration) WithPrincipals(values ...string) *RoleSpecApplyConfiguration {
	for i := range values {
		b.Principals = append(b.Principals, values[i])
	}
	return b
}

// WithAuthorization sets the Authorization field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Authorization field is set to the value of the last call.
func (b *RoleSpecApplyConfiguration) WithAuthorization(value *RoleAuthorizationSpecApplyConfiguration) *RoleSpecApplyConfiguration {
	b.Authorization = value
	return b
}
