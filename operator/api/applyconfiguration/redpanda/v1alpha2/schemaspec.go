// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	redpandav1alpha2 "github.com/redpanda-data/redpanda-operator/operator/api/redpanda/v1alpha2"
)

// SchemaSpecApplyConfiguration represents an declarative configuration of the SchemaSpec type for use
// with apply.
type SchemaSpecApplyConfiguration struct {
	ClusterSource      *ClusterSourceApplyConfiguration     `json:"cluster,omitempty"`
	Text               *string                              `json:"text,omitempty"`
	Type               *redpandav1alpha2.SchemaType         `json:"schemaType,omitempty"`
	References         []SchemaReferenceApplyConfiguration  `json:"references,omitempty"`
	CompatibilityLevel *redpandav1alpha2.CompatibilityLevel `json:"compatibilityLevel,omitempty"`
}

// SchemaSpecApplyConfiguration constructs an declarative configuration of the SchemaSpec type for use with
// apply.
func SchemaSpec() *SchemaSpecApplyConfiguration {
	return &SchemaSpecApplyConfiguration{}
}

// WithClusterSource sets the ClusterSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterSource field is set to the value of the last call.
func (b *SchemaSpecApplyConfiguration) WithClusterSource(value *ClusterSourceApplyConfiguration) *SchemaSpecApplyConfiguration {
	b.ClusterSource = value
	return b
}

// WithText sets the Text field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Text field is set to the value of the last call.
func (b *SchemaSpecApplyConfiguration) WithText(value string) *SchemaSpecApplyConfiguration {
	b.Text = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *SchemaSpecApplyConfiguration) WithType(value redpandav1alpha2.SchemaType) *SchemaSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithReferences adds the given value to the References field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the References field.
func (b *SchemaSpecApplyConfiguration) WithReferences(values ...*SchemaReferenceApplyConfiguration) *SchemaSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithReferences")
		}
		b.References = append(b.References, *values[i])
	}
	return b
}

// WithCompatibilityLevel sets the CompatibilityLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CompatibilityLevel field is set to the value of the last call.
func (b *SchemaSpecApplyConfiguration) WithCompatibilityLevel(value redpandav1alpha2.CompatibilityLevel) *SchemaSpecApplyConfiguration {
	b.CompatibilityLevel = &value
	return b
}
