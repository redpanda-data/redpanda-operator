// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// RoleAuthorizationSpecApplyConfiguration represents a declarative configuration of the RoleAuthorizationSpec type for use
// with apply.
type RoleAuthorizationSpecApplyConfiguration struct {
	ACLs []ACLRuleApplyConfiguration `json:"acls,omitempty"`
}

// RoleAuthorizationSpecApplyConfiguration constructs a declarative configuration of the RoleAuthorizationSpec type for use with
// apply.
func RoleAuthorizationSpec() *RoleAuthorizationSpecApplyConfiguration {
	return &RoleAuthorizationSpecApplyConfiguration{}
}

// WithACLs adds the given value to the ACLs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ACLs field.
func (b *RoleAuthorizationSpecApplyConfiguration) WithACLs(values ...*ACLRuleApplyConfiguration) *RoleAuthorizationSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithACLs")
		}
		b.ACLs = append(b.ACLs, *values[i])
	}
	return b
}
