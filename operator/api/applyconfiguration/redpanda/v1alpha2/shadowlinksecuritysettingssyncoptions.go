// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ShadowLinkSecuritySettingsSyncOptionsApplyConfiguration represents a declarative configuration of the ShadowLinkSecuritySettingsSyncOptions type for use
// with apply.
type ShadowLinkSecuritySettingsSyncOptionsApplyConfiguration struct {
	Interval   *v1.Duration                  `json:"interval,omitempty"`
	Enabled    *bool                         `json:"enabled,omitempty"`
	ACLFilters []ACLFilterApplyConfiguration `json:"aclFilters,omitempty"`
}

// ShadowLinkSecuritySettingsSyncOptionsApplyConfiguration constructs a declarative configuration of the ShadowLinkSecuritySettingsSyncOptions type for use with
// apply.
func ShadowLinkSecuritySettingsSyncOptions() *ShadowLinkSecuritySettingsSyncOptionsApplyConfiguration {
	return &ShadowLinkSecuritySettingsSyncOptionsApplyConfiguration{}
}

// WithInterval sets the Interval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Interval field is set to the value of the last call.
func (b *ShadowLinkSecuritySettingsSyncOptionsApplyConfiguration) WithInterval(value v1.Duration) *ShadowLinkSecuritySettingsSyncOptionsApplyConfiguration {
	b.Interval = &value
	return b
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *ShadowLinkSecuritySettingsSyncOptionsApplyConfiguration) WithEnabled(value bool) *ShadowLinkSecuritySettingsSyncOptionsApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithACLFilters adds the given value to the ACLFilters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ACLFilters field.
func (b *ShadowLinkSecuritySettingsSyncOptionsApplyConfiguration) WithACLFilters(values ...*ACLFilterApplyConfiguration) *ShadowLinkSecuritySettingsSyncOptionsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithACLFilters")
		}
		b.ACLFilters = append(b.ACLFilters, *values[i])
	}
	return b
}
