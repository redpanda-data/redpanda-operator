// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// StaticConfigurationSourceApplyConfiguration represents an declarative configuration of the StaticConfigurationSource type for use
// with apply.
type StaticConfigurationSourceApplyConfiguration struct {
	Kafka *KafkaAPISpecApplyConfiguration `json:"kafka,omitempty"`
	Admin *AdminAPISpecApplyConfiguration `json:"admin,omitempty"`
}

// StaticConfigurationSourceApplyConfiguration constructs an declarative configuration of the StaticConfigurationSource type for use with
// apply.
func StaticConfigurationSource() *StaticConfigurationSourceApplyConfiguration {
	return &StaticConfigurationSourceApplyConfiguration{}
}

// WithKafka sets the Kafka field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kafka field is set to the value of the last call.
func (b *StaticConfigurationSourceApplyConfiguration) WithKafka(value *KafkaAPISpecApplyConfiguration) *StaticConfigurationSourceApplyConfiguration {
	b.Kafka = value
	return b
}

// WithAdmin sets the Admin field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Admin field is set to the value of the last call.
func (b *StaticConfigurationSourceApplyConfiguration) WithAdmin(value *AdminAPISpecApplyConfiguration) *StaticConfigurationSourceApplyConfiguration {
	b.Admin = value
	return b
}
