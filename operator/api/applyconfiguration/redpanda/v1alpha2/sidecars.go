// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/api/core/v1"
)

// SidecarsApplyConfiguration represents a declarative configuration of the Sidecars type for use
// with apply.
type SidecarsApplyConfiguration struct {
	Image             *RedpandaImageApplyConfiguration `json:"image,omitempty"`
	ExtraVolumeMounts *string                          `json:"extraVolumeMounts,omitempty"`
	Resources         *v1.ResourceRequirements         `json:"resources,omitempty"`
	SecurityContext   *v1.SecurityContext              `json:"securityContext,omitempty"`
	Args              []string                         `json:"args,omitempty"`
}

// SidecarsApplyConfiguration constructs a declarative configuration of the Sidecars type for use with
// apply.
func Sidecars() *SidecarsApplyConfiguration {
	return &SidecarsApplyConfiguration{}
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *SidecarsApplyConfiguration) WithImage(value *RedpandaImageApplyConfiguration) *SidecarsApplyConfiguration {
	b.Image = value
	return b
}

// WithExtraVolumeMounts sets the ExtraVolumeMounts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExtraVolumeMounts field is set to the value of the last call.
func (b *SidecarsApplyConfiguration) WithExtraVolumeMounts(value string) *SidecarsApplyConfiguration {
	b.ExtraVolumeMounts = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *SidecarsApplyConfiguration) WithResources(value v1.ResourceRequirements) *SidecarsApplyConfiguration {
	b.Resources = &value
	return b
}

// WithSecurityContext sets the SecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecurityContext field is set to the value of the last call.
func (b *SidecarsApplyConfiguration) WithSecurityContext(value v1.SecurityContext) *SidecarsApplyConfiguration {
	b.SecurityContext = &value
	return b
}

// WithArgs adds the given value to the Args field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Args field.
func (b *SidecarsApplyConfiguration) WithArgs(values ...string) *SidecarsApplyConfiguration {
	for i := range values {
		b.Args = append(b.Args, values[i])
	}
	return b
}
