// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// AutoCreateTopicsApplyConfiguration represents a declarative configuration of the AutoCreateTopics type for use
// with apply.
type AutoCreateTopicsApplyConfiguration struct {
	Enabled      *bool                           `json:"enabled,omitempty"`
	TopicFilters []TopicFilterApplyConfiguration `json:"topicFilters,omitempty"`
}

// AutoCreateTopicsApplyConfiguration constructs a declarative configuration of the AutoCreateTopics type for use with
// apply.
func AutoCreateTopics() *AutoCreateTopicsApplyConfiguration {
	return &AutoCreateTopicsApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *AutoCreateTopicsApplyConfiguration) WithEnabled(value bool) *AutoCreateTopicsApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithTopicFilters adds the given value to the TopicFilters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TopicFilters field.
func (b *AutoCreateTopicsApplyConfiguration) WithTopicFilters(values ...*TopicFilterApplyConfiguration) *AutoCreateTopicsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTopicFilters")
		}
		b.TopicFilters = append(b.TopicFilters, *values[i])
	}
	return b
}
