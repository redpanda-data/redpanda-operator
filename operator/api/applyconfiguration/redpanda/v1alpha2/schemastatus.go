// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// SchemaStatusApplyConfiguration represents an declarative configuration of the SchemaStatus type for use
// with apply.
type SchemaStatusApplyConfiguration struct {
	ObservedGeneration *int64                           `json:"observedGeneration,omitempty"`
	Conditions         []v1.ConditionApplyConfiguration `json:"conditions,omitempty"`
	Versions           []int                            `json:"versions,omitempty"`
	SchemaHash         *string                          `json:"schemaHash,omitempty"`
}

// SchemaStatusApplyConfiguration constructs an declarative configuration of the SchemaStatus type for use with
// apply.
func SchemaStatus() *SchemaStatusApplyConfiguration {
	return &SchemaStatusApplyConfiguration{}
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *SchemaStatusApplyConfiguration) WithObservedGeneration(value int64) *SchemaStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *SchemaStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *SchemaStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithVersions adds the given value to the Versions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Versions field.
func (b *SchemaStatusApplyConfiguration) WithVersions(values ...int) *SchemaStatusApplyConfiguration {
	for i := range values {
		b.Versions = append(b.Versions, values[i])
	}
	return b
}

// WithSchemaHash sets the SchemaHash field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SchemaHash field is set to the value of the last call.
func (b *SchemaStatusApplyConfiguration) WithSchemaHash(value string) *SchemaStatusApplyConfiguration {
	b.SchemaHash = &value
	return b
}
