// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// UserSpecApplyConfiguration represents an declarative configuration of the UserSpec type for use
// with apply.
type UserSpecApplyConfiguration struct {
	ClusterSource  *ClusterSourceApplyConfiguration          `json:"cluster,omitempty"`
	Authentication *UserAuthenticationSpecApplyConfiguration `json:"authentication,omitempty"`
	Authorization  *UserAuthorizationSpecApplyConfiguration  `json:"authorization,omitempty"`
	Template       *UserTemplateSpecApplyConfiguration       `json:"template,omitempty"`
}

// UserSpecApplyConfiguration constructs an declarative configuration of the UserSpec type for use with
// apply.
func UserSpec() *UserSpecApplyConfiguration {
	return &UserSpecApplyConfiguration{}
}

// WithClusterSource sets the ClusterSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterSource field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithClusterSource(value *ClusterSourceApplyConfiguration) *UserSpecApplyConfiguration {
	b.ClusterSource = value
	return b
}

// WithAuthentication sets the Authentication field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Authentication field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithAuthentication(value *UserAuthenticationSpecApplyConfiguration) *UserSpecApplyConfiguration {
	b.Authentication = value
	return b
}

// WithAuthorization sets the Authorization field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Authorization field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithAuthorization(value *UserAuthorizationSpecApplyConfiguration) *UserSpecApplyConfiguration {
	b.Authorization = value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithTemplate(value *UserTemplateSpecApplyConfiguration) *UserSpecApplyConfiguration {
	b.Template = value
	return b
}
