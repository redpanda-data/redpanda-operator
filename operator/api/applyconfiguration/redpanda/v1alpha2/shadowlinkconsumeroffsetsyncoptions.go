// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	time "time"
)

// ShadowLinkConsumerOffsetSyncOptionsApplyConfiguration represents a declarative configuration of the ShadowLinkConsumerOffsetSyncOptions type for use
// with apply.
type ShadowLinkConsumerOffsetSyncOptionsApplyConfiguration struct {
	Interval     *time.Duration                 `json:"interval,omitempty"`
	Enabled      *bool                          `json:"enabled,omitempty"`
	GroupFilters []NameFilterApplyConfiguration `json:"groupFilters,omitempty"`
}

// ShadowLinkConsumerOffsetSyncOptionsApplyConfiguration constructs a declarative configuration of the ShadowLinkConsumerOffsetSyncOptions type for use with
// apply.
func ShadowLinkConsumerOffsetSyncOptions() *ShadowLinkConsumerOffsetSyncOptionsApplyConfiguration {
	return &ShadowLinkConsumerOffsetSyncOptionsApplyConfiguration{}
}

// WithInterval sets the Interval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Interval field is set to the value of the last call.
func (b *ShadowLinkConsumerOffsetSyncOptionsApplyConfiguration) WithInterval(value time.Duration) *ShadowLinkConsumerOffsetSyncOptionsApplyConfiguration {
	b.Interval = &value
	return b
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *ShadowLinkConsumerOffsetSyncOptionsApplyConfiguration) WithEnabled(value bool) *ShadowLinkConsumerOffsetSyncOptionsApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithGroupFilters adds the given value to the GroupFilters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the GroupFilters field.
func (b *ShadowLinkConsumerOffsetSyncOptionsApplyConfiguration) WithGroupFilters(values ...*NameFilterApplyConfiguration) *ShadowLinkConsumerOffsetSyncOptionsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithGroupFilters")
		}
		b.GroupFilters = append(b.GroupFilters, *values[i])
	}
	return b
}
