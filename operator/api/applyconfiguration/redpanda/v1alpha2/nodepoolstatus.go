// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// NodePoolStatusApplyConfiguration represents a declarative configuration of the NodePoolStatus type for use
// with apply.
type NodePoolStatusApplyConfiguration struct {
	EmbeddedNodePoolStatusApplyConfiguration `json:",inline"`
	DeployedGeneration                       *int64                           `json:"deployedGeneration,omitempty"`
	Conditions                               []v1.ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// NodePoolStatusApplyConfiguration constructs a declarative configuration of the NodePoolStatus type for use with
// apply.
func NodePoolStatus() *NodePoolStatusApplyConfiguration {
	return &NodePoolStatusApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *NodePoolStatusApplyConfiguration) WithName(value string) *NodePoolStatusApplyConfiguration {
	b.EmbeddedNodePoolStatusApplyConfiguration.Name = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *NodePoolStatusApplyConfiguration) WithReplicas(value int32) *NodePoolStatusApplyConfiguration {
	b.EmbeddedNodePoolStatusApplyConfiguration.Replicas = &value
	return b
}

// WithDesiredReplicas sets the DesiredReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DesiredReplicas field is set to the value of the last call.
func (b *NodePoolStatusApplyConfiguration) WithDesiredReplicas(value int32) *NodePoolStatusApplyConfiguration {
	b.EmbeddedNodePoolStatusApplyConfiguration.DesiredReplicas = &value
	return b
}

// WithOutOfDateReplicas sets the OutOfDateReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OutOfDateReplicas field is set to the value of the last call.
func (b *NodePoolStatusApplyConfiguration) WithOutOfDateReplicas(value int32) *NodePoolStatusApplyConfiguration {
	b.EmbeddedNodePoolStatusApplyConfiguration.OutOfDateReplicas = &value
	return b
}

// WithUpToDateReplicas sets the UpToDateReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpToDateReplicas field is set to the value of the last call.
func (b *NodePoolStatusApplyConfiguration) WithUpToDateReplicas(value int32) *NodePoolStatusApplyConfiguration {
	b.EmbeddedNodePoolStatusApplyConfiguration.UpToDateReplicas = &value
	return b
}

// WithCondemnedReplicas sets the CondemnedReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CondemnedReplicas field is set to the value of the last call.
func (b *NodePoolStatusApplyConfiguration) WithCondemnedReplicas(value int32) *NodePoolStatusApplyConfiguration {
	b.EmbeddedNodePoolStatusApplyConfiguration.CondemnedReplicas = &value
	return b
}

// WithReadyReplicas sets the ReadyReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadyReplicas field is set to the value of the last call.
func (b *NodePoolStatusApplyConfiguration) WithReadyReplicas(value int32) *NodePoolStatusApplyConfiguration {
	b.EmbeddedNodePoolStatusApplyConfiguration.ReadyReplicas = &value
	return b
}

// WithRunningReplicas sets the RunningReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RunningReplicas field is set to the value of the last call.
func (b *NodePoolStatusApplyConfiguration) WithRunningReplicas(value int32) *NodePoolStatusApplyConfiguration {
	b.EmbeddedNodePoolStatusApplyConfiguration.RunningReplicas = &value
	return b
}

// WithDeployedGeneration sets the DeployedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeployedGeneration field is set to the value of the last call.
func (b *NodePoolStatusApplyConfiguration) WithDeployedGeneration(value int64) *NodePoolStatusApplyConfiguration {
	b.DeployedGeneration = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *NodePoolStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *NodePoolStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
