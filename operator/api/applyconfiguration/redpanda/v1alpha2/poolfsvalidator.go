// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// PoolFSValidatorApplyConfiguration represents a declarative configuration of the PoolFSValidator type for use
// with apply.
type PoolFSValidatorApplyConfiguration struct {
	Enabled    *bool   `json:"enabled,omitempty"`
	ExpectedFS *string `json:"expectedFS,omitempty"`
}

// PoolFSValidatorApplyConfiguration constructs a declarative configuration of the PoolFSValidator type for use with
// apply.
func PoolFSValidator() *PoolFSValidatorApplyConfiguration {
	return &PoolFSValidatorApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *PoolFSValidatorApplyConfiguration) WithEnabled(value bool) *PoolFSValidatorApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithExpectedFS sets the ExpectedFS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExpectedFS field is set to the value of the last call.
func (b *PoolFSValidatorApplyConfiguration) WithExpectedFS(value string) *PoolFSValidatorApplyConfiguration {
	b.ExpectedFS = &value
	return b
}
