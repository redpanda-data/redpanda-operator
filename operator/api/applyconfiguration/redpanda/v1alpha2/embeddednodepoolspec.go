// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// EmbeddedNodePoolSpecApplyConfiguration represents a declarative configuration of the EmbeddedNodePoolSpec type for use
// with apply.
type EmbeddedNodePoolSpecApplyConfiguration struct {
	AdditionalSelectorLabels   map[string]string                     `json:"additionalSelectorLabels,omitempty"`
	Replicas                   *int32                                `json:"replicas,omitempty"`
	AdditionalRedpandaCmdFlags []string                              `json:"additionalRedpandaCmdFlags,omitempty"`
	PodTemplate                *PodTemplateApplyConfiguration        `json:"podTemplate,omitempty"`
	Budget                     *BudgetApplyConfiguration             `json:"budget,omitempty"`
	PodAntiAffinity            *PodAntiAffinityApplyConfiguration    `json:"podAntiAffinity,omitempty"`
	Sidecars                   *SidecarsApplyConfiguration           `json:"sideCars,omitempty"`
	InitContainers             *PoolInitContainersApplyConfiguration `json:"initContainers,omitempty"`
}

// EmbeddedNodePoolSpecApplyConfiguration constructs a declarative configuration of the EmbeddedNodePoolSpec type for use with
// apply.
func EmbeddedNodePoolSpec() *EmbeddedNodePoolSpecApplyConfiguration {
	return &EmbeddedNodePoolSpecApplyConfiguration{}
}

// WithAdditionalSelectorLabels puts the entries into the AdditionalSelectorLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AdditionalSelectorLabels field,
// overwriting an existing map entries in AdditionalSelectorLabels field with the same key.
func (b *EmbeddedNodePoolSpecApplyConfiguration) WithAdditionalSelectorLabels(entries map[string]string) *EmbeddedNodePoolSpecApplyConfiguration {
	if b.AdditionalSelectorLabels == nil && len(entries) > 0 {
		b.AdditionalSelectorLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.AdditionalSelectorLabels[k] = v
	}
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *EmbeddedNodePoolSpecApplyConfiguration) WithReplicas(value int32) *EmbeddedNodePoolSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithAdditionalRedpandaCmdFlags adds the given value to the AdditionalRedpandaCmdFlags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalRedpandaCmdFlags field.
func (b *EmbeddedNodePoolSpecApplyConfiguration) WithAdditionalRedpandaCmdFlags(values ...string) *EmbeddedNodePoolSpecApplyConfiguration {
	for i := range values {
		b.AdditionalRedpandaCmdFlags = append(b.AdditionalRedpandaCmdFlags, values[i])
	}
	return b
}

// WithPodTemplate sets the PodTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodTemplate field is set to the value of the last call.
func (b *EmbeddedNodePoolSpecApplyConfiguration) WithPodTemplate(value *PodTemplateApplyConfiguration) *EmbeddedNodePoolSpecApplyConfiguration {
	b.PodTemplate = value
	return b
}

// WithBudget sets the Budget field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Budget field is set to the value of the last call.
func (b *EmbeddedNodePoolSpecApplyConfiguration) WithBudget(value *BudgetApplyConfiguration) *EmbeddedNodePoolSpecApplyConfiguration {
	b.Budget = value
	return b
}

// WithPodAntiAffinity sets the PodAntiAffinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodAntiAffinity field is set to the value of the last call.
func (b *EmbeddedNodePoolSpecApplyConfiguration) WithPodAntiAffinity(value *PodAntiAffinityApplyConfiguration) *EmbeddedNodePoolSpecApplyConfiguration {
	b.PodAntiAffinity = value
	return b
}

// WithSidecars sets the Sidecars field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Sidecars field is set to the value of the last call.
func (b *EmbeddedNodePoolSpecApplyConfiguration) WithSidecars(value *SidecarsApplyConfiguration) *EmbeddedNodePoolSpecApplyConfiguration {
	b.Sidecars = value
	return b
}

// WithInitContainers sets the InitContainers field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InitContainers field is set to the value of the last call.
func (b *EmbeddedNodePoolSpecApplyConfiguration) WithInitContainers(value *PoolInitContainersApplyConfiguration) *EmbeddedNodePoolSpecApplyConfiguration {
	b.InitContainers = value
	return b
}
