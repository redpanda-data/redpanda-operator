// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	redpandav1alpha2 "github.com/redpanda-data/redpanda-operator/operator/api/redpanda/v1alpha2"
)

// ConsumerGroupFilterApplyConfiguration represents a declarative configuration of the ConsumerGroupFilter type for use
// with apply.
type ConsumerGroupFilterApplyConfiguration struct {
	Name        *string                       `json:"name,omitempty"`
	FilterType  *redpandav1alpha2.FilterType  `json:"filterType,omitempty"`
	PatternType *redpandav1alpha2.PatternType `json:"patternType,omitempty"`
}

// ConsumerGroupFilterApplyConfiguration constructs a declarative configuration of the ConsumerGroupFilter type for use with
// apply.
func ConsumerGroupFilter() *ConsumerGroupFilterApplyConfiguration {
	return &ConsumerGroupFilterApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ConsumerGroupFilterApplyConfiguration) WithName(value string) *ConsumerGroupFilterApplyConfiguration {
	b.Name = &value
	return b
}

// WithFilterType sets the FilterType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FilterType field is set to the value of the last call.
func (b *ConsumerGroupFilterApplyConfiguration) WithFilterType(value redpandav1alpha2.FilterType) *ConsumerGroupFilterApplyConfiguration {
	b.FilterType = &value
	return b
}

// WithPatternType sets the PatternType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PatternType field is set to the value of the last call.
func (b *ConsumerGroupFilterApplyConfiguration) WithPatternType(value redpandav1alpha2.PatternType) *ConsumerGroupFilterApplyConfiguration {
	b.PatternType = &value
	return b
}
