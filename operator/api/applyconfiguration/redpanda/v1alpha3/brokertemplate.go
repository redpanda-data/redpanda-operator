// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

import (
	v1 "k8s.io/api/core/v1"
)

// BrokerTemplateApplyConfiguration represents an declarative configuration of the BrokerTemplate type for use
// with apply.
type BrokerTemplateApplyConfiguration struct {
	Image                     *string                                  `json:"image,omitempty"`
	Resources                 *v1.ResourceRequirements                 `json:"resources,omitempty"`
	Tuning                    []string                                 `json:"tuning,omitempty"`
	Config                    map[string]ValueSourceApplyConfiguration `json:"config,omitempty"`
	SetDataDirectoryOwnership *bool                                    `json:"setDataDirectoryOwnership,omitempty"`
	ValidateFilesystem        *bool                                    `json:"validateFilesystem,omitempty"`
	VolumeClaimTemplates      []v1.PersistentVolumeClaim               `json:"volumeClaimTemplates,omitempty"`
	PodTemplate               *PodTemplateApplyConfiguration           `json:"podTemplate,omitempty"`
}

// BrokerTemplateApplyConfiguration constructs an declarative configuration of the BrokerTemplate type for use with
// apply.
func BrokerTemplate() *BrokerTemplateApplyConfiguration {
	return &BrokerTemplateApplyConfiguration{}
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *BrokerTemplateApplyConfiguration) WithImage(value string) *BrokerTemplateApplyConfiguration {
	b.Image = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *BrokerTemplateApplyConfiguration) WithResources(value v1.ResourceRequirements) *BrokerTemplateApplyConfiguration {
	b.Resources = &value
	return b
}

// WithTuning adds the given value to the Tuning field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tuning field.
func (b *BrokerTemplateApplyConfiguration) WithTuning(values ...string) *BrokerTemplateApplyConfiguration {
	for i := range values {
		b.Tuning = append(b.Tuning, values[i])
	}
	return b
}

// WithConfig puts the entries into the Config field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Config field,
// overwriting an existing map entries in Config field with the same key.
func (b *BrokerTemplateApplyConfiguration) WithConfig(entries map[string]ValueSourceApplyConfiguration) *BrokerTemplateApplyConfiguration {
	if b.Config == nil && len(entries) > 0 {
		b.Config = make(map[string]ValueSourceApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Config[k] = v
	}
	return b
}

// WithSetDataDirectoryOwnership sets the SetDataDirectoryOwnership field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SetDataDirectoryOwnership field is set to the value of the last call.
func (b *BrokerTemplateApplyConfiguration) WithSetDataDirectoryOwnership(value bool) *BrokerTemplateApplyConfiguration {
	b.SetDataDirectoryOwnership = &value
	return b
}

// WithValidateFilesystem sets the ValidateFilesystem field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ValidateFilesystem field is set to the value of the last call.
func (b *BrokerTemplateApplyConfiguration) WithValidateFilesystem(value bool) *BrokerTemplateApplyConfiguration {
	b.ValidateFilesystem = &value
	return b
}

// WithVolumeClaimTemplates adds the given value to the VolumeClaimTemplates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VolumeClaimTemplates field.
func (b *BrokerTemplateApplyConfiguration) WithVolumeClaimTemplates(values ...v1.PersistentVolumeClaim) *BrokerTemplateApplyConfiguration {
	for i := range values {
		b.VolumeClaimTemplates = append(b.VolumeClaimTemplates, values[i])
	}
	return b
}

// WithPodTemplate sets the PodTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodTemplate field is set to the value of the last call.
func (b *BrokerTemplateApplyConfiguration) WithPodTemplate(value *PodTemplateApplyConfiguration) *BrokerTemplateApplyConfiguration {
	b.PodTemplate = value
	return b
}
