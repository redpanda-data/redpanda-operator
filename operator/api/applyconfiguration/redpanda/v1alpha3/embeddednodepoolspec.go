// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

// EmbeddedNodePoolSpecApplyConfiguration represents an declarative configuration of the EmbeddedNodePoolSpec type for use
// with apply.
type EmbeddedNodePoolSpecApplyConfiguration struct {
	Replicas       *int32                            `json:"replicas,omitempty"`
	BrokerTemplate *BrokerTemplateApplyConfiguration `json:"brokerTemplate,omitempty"`
}

// EmbeddedNodePoolSpecApplyConfiguration constructs an declarative configuration of the EmbeddedNodePoolSpec type for use with
// apply.
func EmbeddedNodePoolSpec() *EmbeddedNodePoolSpecApplyConfiguration {
	return &EmbeddedNodePoolSpecApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *EmbeddedNodePoolSpecApplyConfiguration) WithReplicas(value int32) *EmbeddedNodePoolSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithBrokerTemplate sets the BrokerTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BrokerTemplate field is set to the value of the last call.
func (b *EmbeddedNodePoolSpecApplyConfiguration) WithBrokerTemplate(value *BrokerTemplateApplyConfiguration) *EmbeddedNodePoolSpecApplyConfiguration {
	b.BrokerTemplate = value
	return b
}
