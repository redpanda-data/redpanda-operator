// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// RedpandaLicenseStatusApplyConfiguration represents an declarative configuration of the RedpandaLicenseStatus type for use
// with apply.
type RedpandaLicenseStatusApplyConfiguration struct {
	Violation     *bool    `json:"violation,omitempty"`
	InUseFeatures []string `json:"inUseFeatures,omitempty"`
	Expired       *bool    `json:"expired,omitempty"`
	Type          *string  `json:"type,omitempty"`
	Organization  *string  `json:"organization,omitempty"`
	Expiration    *v1.Time `json:"expiration,omitempty"`
}

// RedpandaLicenseStatusApplyConfiguration constructs an declarative configuration of the RedpandaLicenseStatus type for use with
// apply.
func RedpandaLicenseStatus() *RedpandaLicenseStatusApplyConfiguration {
	return &RedpandaLicenseStatusApplyConfiguration{}
}

// WithViolation sets the Violation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Violation field is set to the value of the last call.
func (b *RedpandaLicenseStatusApplyConfiguration) WithViolation(value bool) *RedpandaLicenseStatusApplyConfiguration {
	b.Violation = &value
	return b
}

// WithInUseFeatures adds the given value to the InUseFeatures field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InUseFeatures field.
func (b *RedpandaLicenseStatusApplyConfiguration) WithInUseFeatures(values ...string) *RedpandaLicenseStatusApplyConfiguration {
	for i := range values {
		b.InUseFeatures = append(b.InUseFeatures, values[i])
	}
	return b
}

// WithExpired sets the Expired field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Expired field is set to the value of the last call.
func (b *RedpandaLicenseStatusApplyConfiguration) WithExpired(value bool) *RedpandaLicenseStatusApplyConfiguration {
	b.Expired = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *RedpandaLicenseStatusApplyConfiguration) WithType(value string) *RedpandaLicenseStatusApplyConfiguration {
	b.Type = &value
	return b
}

// WithOrganization sets the Organization field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Organization field is set to the value of the last call.
func (b *RedpandaLicenseStatusApplyConfiguration) WithOrganization(value string) *RedpandaLicenseStatusApplyConfiguration {
	b.Organization = &value
	return b
}

// WithExpiration sets the Expiration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Expiration field is set to the value of the last call.
func (b *RedpandaLicenseStatusApplyConfiguration) WithExpiration(value v1.Time) *RedpandaLicenseStatusApplyConfiguration {
	b.Expiration = &value
	return b
}
