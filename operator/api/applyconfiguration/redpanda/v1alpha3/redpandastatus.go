// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// RedpandaStatusApplyConfiguration represents an declarative configuration of the RedpandaStatus type for use
// with apply.
type RedpandaStatusApplyConfiguration struct {
	Conditions    []v1.ConditionApplyConfiguration         `json:"conditions,omitempty"`
	LicenseStatus *RedpandaLicenseStatusApplyConfiguration `json:"license,omitempty"`
	NodePools     []NodePoolStatusApplyConfiguration       `json:"nodePools,omitempty"`
	ConfigVersion *string                                  `json:"configVersion,omitempty"`
}

// RedpandaStatusApplyConfiguration constructs an declarative configuration of the RedpandaStatus type for use with
// apply.
func RedpandaStatus() *RedpandaStatusApplyConfiguration {
	return &RedpandaStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *RedpandaStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *RedpandaStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithLicenseStatus sets the LicenseStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LicenseStatus field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithLicenseStatus(value *RedpandaLicenseStatusApplyConfiguration) *RedpandaStatusApplyConfiguration {
	b.LicenseStatus = value
	return b
}

// WithNodePools adds the given value to the NodePools field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NodePools field.
func (b *RedpandaStatusApplyConfiguration) WithNodePools(values ...*NodePoolStatusApplyConfiguration) *RedpandaStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNodePools")
		}
		b.NodePools = append(b.NodePools, *values[i])
	}
	return b
}

// WithConfigVersion sets the ConfigVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigVersion field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithConfigVersion(value string) *RedpandaStatusApplyConfiguration {
	b.ConfigVersion = &value
	return b
}
