// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

package v1alpha2

import (
	"github.com/redpanda-data/redpanda-operator/src/go/k8s/api/apiutil"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// RedpandaClusterSpec defines the desired state of a Redpanda cluster. These settings are the same as those defined in the Redpanda Helm chart. The values in these settings are passed to the Redpanda Helm chart through Flux. For all default values and links to more documentation, see https://docs.redpanda.com/current/reference/redpanda-helm-spec/.
type RedpandaClusterSpec struct {
	// Customizes the labels `app.kubernetes.io/component=<nameOverride>-statefulset` and `app.kubernetes.io/name=<nameOverride>` on the StatefulSet Pods. The default is `redpanda`.
	NameOverride string `json:"nameOverride,omitempty"`
	// Customizes the name of the StatefulSet and Services. The default is `redpanda`.
	FullNameOverride string `json:"fullNameOverride,omitempty"`
	// Customizes the Kubernetes cluster domain. This domain is used to generate the internal domains of the StatefulSet Pods. For details, see https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id. The default is the `cluster.local` domain.
	ClusterDomain string `json:"clusterDomain,omitempty"`
	// Assigns custom labels to all resources generated by the Redpanda Helm chart. Specify labels as key/value pairs.
	CommonLabels map[string]string `json:"commonLabels,omitempty"`
	// Specifies on which nodes a Pod should be scheduled. These key/value pairs ensure that Pods are scheduled onto nodes with the specified labels.
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`
	// Specifies tolerations to allow Pods to be scheduled onto nodes where they otherwise wouldnâ€™t.
	Tolerations []corev1.Toleration `json:"tolerations,omitempty"`

	// Defines the container image settings to use for the Redpanda cluster.
	Image *RedpandaImage `json:"image,omitempty"`
	// Specifies credentials for a private image repository. For details, see https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/.
	ImagePullSecrets []corev1.LocalObjectReference `json:"imagePullSecrets,omitempty"`

	// Deprecated: Use `Enterprise` instead.
	LicenseKey *string `json:"license_key,omitempty"`
	// Deprecated: Use `EnterpriseLicenseSecretRef` instead.
	LicenseSecretRef *LicenseSecretRef `json:"license_secret_ref,omitempty"`
	// Defines an Enterprise license.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Defines rack awareness settings.
	RackAwareness *RackAwareness `json:"rackAwareness,omitempty"`

	// Defines Redpanda Console settings.
	Console *RedpandaConsole `json:"console,omitempty"`

	// Defines Redpanda Connector settings.
	Connectors *RedpandaConnectors `json:"connectors,omitempty"`

	// Defines authentication settings for listeners.
	Auth *Auth `json:"auth,omitempty"`

	// Defines TLS settings for listeners.
	TLS *TLS `json:"tls,omitempty"`

	// Defines external access settings.
	External *External `json:"external,omitempty"`

	// Defines the log level settings.
	Logging *Logging `json:"logging,omitempty"`

	// Defines the log level settings.
	AuditLogging *AuditLogging `json:"auditLogging,omitempty"`

	// Defines container resource settings.
	Resources *Resources `json:"resources,omitempty"`

	// Defines settings for the headless ClusterIP Service.
	Service *Service `json:"service,omitempty"`

	// Defines storage settings for the Redpanda data directory and the Tiered Storage cache.
	Storage *Storage `json:"storage,omitempty"`

	// Defines settings for the post-install hook, which runs after each install or upgrade. For example, this job is responsible for setting the Enterprise license, if specified.
	PostInstallJob *PostInstallJob `json:"post_install_job,omitempty"`

	// Defines settings for the post-upgrade hook, which runs after each update. For example, this job is responsible for setting cluster configuration properties and restarting services such as Schema Registry, if required.
	PostUpgradeJob *PostUpgradeJob `json:"post_upgrade_job,omitempty"`

	// Defines settings for the StatefulSet that manages Redpanda brokers.
	Statefulset *Statefulset `json:"statefulset,omitempty"`

	// Defines settings for the autotuner tool in Redpanda. The autotuner identifies the hardware configuration in the container and optimizes the Linux kernel to give you the best performance.
	Tuning *Tuning `json:"tuning,omitempty"`

	// Defines settings for listeners, including HTTP Proxy, Schema Registry, the Admin API and the Kafka API.
	Listeners *Listeners `json:"listeners,omitempty"`

	// Defines configuration properties supported by Redpanda that may not work correctly in a Kubernetes cluster. Changing these values from the defaults comes with some risk. Use these properties to customize various Redpanda configurations that are not available in the `RedpandaClusterSpec`. These values have no impact on the configuration or behavior of the Kubernetes objects deployed by Helm, and therefore should not be modified for the purpose of configuring those objects. Instead, these settings get passed directly to the Redpanda binary at startup.
	Config *Config `json:"config,omitempty"`

	// Defines Role Based Access Control (RBAC) settings.
	RBAC *RBAC `json:"rbac,omitempty"`

	// Defines Service account settings.
	ServiceAccount *ServiceAccount `json:"serviceAccount,omitempty"`

	// Defines settings for monitoring Redpanda.
	Monitoring *Monitoring `json:"monitoring,omitempty"`

	// Adds the `--force` flag in `helm upgrade` commands. Used for allowing a change of TLS configuration for the RPC listener.
	// Setting `force` to `true` will result in a short period of downtime.
	Force *bool `json:"force,omitempty"`
}

// ConfigWatcher configures a sidecar that watches for changes to the Secret in `auth.sasl.secretRef` and applies the changes to the Redpanda cluster.
type ConfigWatcher struct {
	// Specifies whether the sidecar is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Specifies additional volumes to mount to the sidecar.
	ExtraVolumeMounts string `json:"extraVolumeMounts,omitempty"`
	// Specifies resource requests for the sidecar container.
	Resources *corev1.ResourceRequirements `json:"resources,omitempty"`
	// Specifies the container's security context, including privileges and access levels of the container and its processes.
	SecurityContext *corev1.SecurityContext `json:"securityContext,omitempty"`
}

// RedpandaImage configures the Redpanda container image settings in the Helm values.
type RedpandaImage struct {
	// Specifies the image repository to pull from.
	Repository *string `json:"repository,omitempty"`
	// Specifies the image tag.
	Tag *string `json:"tag,omitempty"`
	// Specifies the strategy used for pulling images from the repository. For available values, see https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy.
	PullPolicy *string `json:"pullPolicy,omitempty"`
}

// LicenseSecretRef is deprecated. Use `EnterpriseLicenseSecretRef` instead.
type LicenseSecretRef struct {
	// Specifies the key that is contains the Enterprise license in the Secret.
	SecretKey *string `json:"secret_key,omitempty"`
	// Specifies the name of the Secret.
	SecretName *string `json:"secret_name,omitempty"`
}

// RackAwareness configures rack awareness in the Helm values. See https://docs.redpanda.com/current/manage/kubernetes/kubernetes-rack-awareness/.
type RackAwareness struct {
	// Specifies whether rack awareness is enabled. When enabled, Kubernetes failure zones are treated as racks. Redpanda maps each rack to a failure zone and places partition replicas across them. Requires `rbac.enabled` set to `true`.
	Enabled bool `json:"enabled"`
	// Specifies the key in Node labels or annotations to use to denote failure zones.
	NodeAnnotation *string `json:"nodeAnnotation,omitempty"`
}

// RedpandaConsole configures the Redpanda Console subchart of the Redpanda Helm chart. Use these settings to configure the subchart. For more details on each setting, see the Helm values for the Redpanda Console chart: https://artifacthub.io/packages/helm/redpanda-data/console?modal=values
type RedpandaConsole struct {
	// Specifies whether the Redpanda Console subchart should be deployed.
	Enabled *bool `json:"enabled,omitempty"`
	// Sets the number of replicas for the Redpanda Console Deployment resource.
	ReplicaCount *int `json:"replicaCount,omitempty"`
	// Specifies a custom name for the Redpanda Console resources, overriding the default naming convention.
	NameOverride *string `json:"nameOverride,omitempty"`
	// Specifies a full custom name, which overrides the entire naming convention including release name and chart name.
	FullNameOverride *string `json:"fullnameOverride,omitempty"`
	// Specifies the priority class name for the Pods that run Redpanda Console.
	PriorityClassName *string `json:"priorityClassName,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Defines the container image for the Redpanda Console, including the repository, name, and tag.
	Image *runtime.RawExtension `json:"image,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Defines Secrets used to pull the container images from a private registry.
	ImagePullSecrets []*runtime.RawExtension `json:"imagePullSecrets,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Configures the ServiceAccount used by the Pods that run Redpanda Console.
	ServiceAccount *runtime.RawExtension `json:"serviceAccount,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	Annotations *runtime.RawExtension `json:"annotations,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Adds custom annotations to the Pods that run Redpanda Console.
	PodAnnotations *runtime.RawExtension `json:"podAnnotations,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Adds custom labels to the Pods that run Redpanda Console.
	PodLabels *runtime.RawExtension `json:"podLabels,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	PodSecurityContext *runtime.RawExtension `json:"podSecurityContext,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Sets the security context for the Pods that run Redpanda Console.
	SecurityContext *runtime.RawExtension `json:"securityContext,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Configures the Kubernetes Service for Redpanda Console.
	Service *runtime.RawExtension `json:"service,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Configures the Kubernetes Ingress resource for Redpanda Console.
	Ingress *runtime.RawExtension `json:"ingress,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Configures resource requests and limits for the Pods that run Redpanda Console.
	Resources *runtime.RawExtension `json:"resources,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Configures Horizontal Pod Autoscaling (HPA) for Redpanda Console.
	Autoscaling *runtime.RawExtension `json:"autoscaling,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies Node labels for Pod assignment.
	NodeSelector *runtime.RawExtension `json:"nodeSelector,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies tolerations for scheduling Pods onto Nodes with taints.
	Tolerations []*runtime.RawExtension `json:"tolerations,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Defines affinity rules for Pod assignment.
	Affinity *runtime.RawExtension `json:"affinity,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies topology spread constraints for Pod placement.
	TopologySpreadConstraints *runtime.RawExtension `json:"topologySpreadConstraints,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Adds extra environment variables to the Pods that run Redpanda Console.
	ExtraEnv []*runtime.RawExtension `json:"extraEnv,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Allows you to add extra environment variables from external resources to the Pods that run Redpanda Console.
	ExtraEnvFrom []*runtime.RawExtension `json:"extraEnvFrom,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Adds extra volumes to the Pods that run Redpanda Console.
	ExtraVolumes []*runtime.RawExtension `json:"extraVolumes,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Mounts additional volumes inside the containers that run Redpanda Console.
	ExtraVolumeMounts []*runtime.RawExtension `json:"extraVolumeMounts,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Adds extra containers to the Pods that run Redpanda Console.
	ExtraContainers []*runtime.RawExtension `json:"extraContainers,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies init containers for the Pods that run Redpanda Console.
	InitContainers *runtime.RawExtension `json:"initContainers,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Mounts additional Secret resources inside the containers that run Redpanda Console.
	SecretMounts []*runtime.RawExtension `json:"secretMounts,omitempty"`
	// Specifies whether a ConfigMap should be created for Redpanda Console.
	ConfigMap *ConsoleCreateObj `json:"configMap,omitempty"`
	// Specifies whether a Secret should be created for Redpanda Console.
	Secret *ConsoleCreateObj `json:"secret,omitempty"`
	// Specifies whether a Deployment should be created for Redpanda Console.
	Deployment *ConsoleCreateObj `json:"deployment,omitempty"`

	// +kubebuilder:pruning:PreserveUnknownFields
	// Configures custom settings for Redpanda Console.
	Console *runtime.RawExtension `json:"console,omitempty"`
}

// ConsoleCreateObj represents configuration options for creating Kubernetes objects such as ConfigMaps, Secrets, and Deployments.
type ConsoleCreateObj struct {
	// Indicates whether the corresponding Kubernetes object (ConfigMap, Secret, or Deployment) should be created.
	Create bool `json:"create,omitempty"`
}

// RedpandaConnectors configures Redpanda Connectors. Redpanda Connectors is a package that includes Kafka Connect and built-in connectors, sometimes known as plugins. See https://docs.redpanda.com/current/deploy/deployment-option/self-hosted/kubernetes/k-deploy-connectors/.
type RedpandaConnectors struct {
	Enabled *bool `json:"enabled,omitempty"`
	// Specifies whether to create Helm tests.
	Test *ConnectorsCreateObj `json:"test,omitempty"`
	// Specifies monitoring resources
	Monitoring *ConnectorMonitoring `json:"monitoring,omitempty"`

	// +kubebuilder:pruning:PreserveUnknownFields
	// Connectors specified manual configurations
	Connectors *runtime.RawExtension `json:"connectors,omitempty"`

	// +kubebuilder:pruning:PreserveUnknownFields
	// Connectors specified manual configurations
	Deployment *runtime.RawExtension `json:"deployment,omitempty"`

	// Specifies a custom name for the Redpanda Console resources, overriding the default naming convention.
	NameOverride *string `json:"nameOverride,omitempty"`
	// Specifies a full custom name, which overrides the entire naming convention including release name and chart name.
	FullNameOverride *string `json:"fullnameOverride,omitempty"`
	// Assigns custom labels to all resources generated by the Connector Helm chart. Specify labels as key/value pairs.
	CommonLabels map[string]string `json:"commonLabels,omitempty"`
	// Applies tolerations to allow Pods to be scheduled on nodes with matching taints, enabling control over where Pods can run.
	Tolerations []corev1.Toleration `json:"tolerations,omitempty"`
	// Defines the container image settings to use for the Redpanda cluster.
	Image *RedpandaImage `json:"image,omitempty"`
	// Specifies credentials for a private image repository. For details, see https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/.
	ImagePullSecrets []corev1.LocalObjectReference `json:"imagePullSecrets,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies superuser credentials
	Auth *runtime.RawExtension `json:"auth,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies container information
	Container *runtime.RawExtension `json:"container,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies storage information
	Storage *runtime.RawExtension `json:"storage,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies logging details
	Logging *runtime.RawExtension `json:"logging,omitempty"`
}

// ConnectorsCreateObj configures Kubernetes resources for Redpanda Connectors.
type ConnectorsCreateObj struct {
	// Specifies whether to create the resource.
	Create *bool `json:"enabled,omitempty"`
}

// Auth configures authentication in the Helm values. See https://docs.redpanda.com/current/manage/kubernetes/security/authentication/sasl-kubernetes/.
type Auth struct {
	// Configures SASL authentication in the Helm values.
	SASL *SASL `json:"sasl,omitempty"`
}

// SASL configures SASL authentication in the Helm values.
type SASL struct {
	// Enables SASL authentication. If you enable SASL authentication, you must provide a Secret name in `secretRef`.
	Enabled bool `json:"enabled"`
	// Specifies the default authentication mechanism to use for superusers. Options are `SCRAM-SHA-256` and `SCRAM-SHA-512`.
	Mechanism *string `json:"mechanism,omitempty"`
	// If `users` is empty, `secretRef` specifies the name of the Secret that contains your superuser credentials in the format <username>:<password>:<optional-authentication-mechanism>. Otherwise, `secretRef` specifies the name of the Secret that the chart creates to store the credentials in `users`.
	SecretRef *string `json:"secretRef,omitempty"`
	// Specifies a list of superuser credentials.
	Users []UsersItems `json:"users,omitempty"`
}

// UsersItems configures a list of superusers in the Helm values.
type UsersItems struct {
	// Specifies the authentication mechanism to use for superusers. Overrides the default in `SASL`. Options are `SCRAM-SHA-256` and `SCRAM-SHA-512`.
	Mechanism *string `json:"mechanism,omitempty"`
	// Specifies the name of the superuser.
	Name *string `json:"name,omitempty"`
	// Specifies the superuser password.
	Password *string `json:"password,omitempty"`
}

// TLS configures TLS in the Helm values. See https://docs.redpanda.com/current/manage/kubernetes/security/tls/.
type TLS struct {
	// Lists all available certificates in the cluster. You can reference a specific certificateâ€™s name in each listenerâ€™s `listeners.<listener name>.tls.cert` setting.
	Certs map[string]*Certificate `json:"certs,omitempty"`
	// Enables TLS globally for all listeners. Each listener must include a certificate name in its `<listener>.tls` object. To allow you to enable TLS for individual listeners, certificates are always loaded, even if TLS is disabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// Certificate configures TLS certificates.
type Certificate struct {
	// Specify the name of an existing Issuer or ClusterIssuer resource to use to generate certificates. Requires cert-manager. See https://cert-manager.io/v1.1-docs.
	IssuerRef *IssuerRef `json:"issuerRef,omitempty"`
	// Specify the name of an existing Secret resource that contains your TLS certificate.
	SecretRef *SecretRef `json:"secretRef,omitempty"`
	// Specify the name of an existing Secret resource that contains your client TLS certificate.
	ClientSecretRef *SecretRef `json:"clientSecretRef,omitempty"`
	// Specifies the validity duration of certificates generated with `issuerRef`.
	Duration *metav1.Duration `json:"duration,omitempty"`
	// Specifies whether to include the `ca.crt` file in the trust stores of all listeners. Set to `true` only for certificates that are not authenticated using public certificate authorities (CAs).
	CAEnabled bool `json:"caEnabled"`
	// Specifies you wish to have Kubernetes internal dns names (IE the headless service of the redpanda StatefulSet) included in `dnsNames` of the  certificate even, when supplying an issuer.
	ApplyInternalDNSNames *bool `json:"applyInternalDNSNames,omitempty"`
}

// IssuerRef configures the Issuer or ClusterIssuer resource to use to generate certificates. Requires cert-manager. See https://cert-manager.io/v1.1-docs.
type IssuerRef struct {
	// Specifies the name of the resource.
	Name string `json:"name"`
	// Specifies the kind of resource. One of `Issuer` or `ClusterIssuer`.
	Kind string `json:"kind"`
}

// SecretRef configures the Secret resource that contains existing TLS certificates.
type SecretRef struct {
	// Specifies the name of the Secret resource.
	Name string `json:"name"`
}

// TrustStore is a mapping from a value on either a Secret or ConfigMap to the
// `truststore_path` field of a listener.
// +kubebuilder:validation:MaxProperties=1
// +kubebuilder:validation:MinProperties=1
type TrustStore struct {
	ConfigMapKeyRef *corev1.ConfigMapKeySelector `json:"configMapKeyRef,omitempty"`
	SecretKeyRef    *corev1.SecretKeySelector    `json:"secretKeyRef,omitempty"`
}

// ListenerTLS configures TLS configuration for each listener in the Helm values.
type ListenerTLS struct {
	// References a specific certificate for the listener.
	Cert *string `json:"cert,omitempty"`
	// Specifies whether TLS is enabled for the listener.
	Enabled *bool `json:"enabled,omitempty"`
	// References a Secret resource containing TLS credentials for the listener.
	//
	// Deprecated: Setting SecretRef has no affect and will be removed in
	// future releases.
	SecretRef *string `json:"secretRef,omitempty"`
	// Indicates whether client authentication (mTLS) is required.
	RequireClientAuth *bool `json:"requireClientAuth,omitempty"`
	// TrustStore allows setting the `truststore_path` on this listener. If
	// specified, this field takes precedence over [Certificate.CAEnabled].
	TrustStore *TrustStore `json:"trustStore,omitempty"`
}

// ExternalService allows you to enable or disable the creation of an external Service type.
type ExternalService struct {
	// Specifies whether to create the external Service. If set to `false`, the external Service type is not created. You can still set your cluster with external access but not create the supporting Service. Set this to `false` to manage your own Service.
	Enabled *bool `json:"enabled,omitempty"`
}

// External defines external connectivity settings in the Helm values.
type External struct {
	// Specifies addresses for the external listeners to advertise.Provide one entry for each broker in order of StatefulSet replicas. The number of brokers is defined in `statefulset.replicas`. The values can be IP addresses or DNS names. If `external.domain` is set, the domain is appended to these values.
	Addresses []string `json:"addresses,omitempty"`
	// Adds custom annotations to the external Service.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Specifies the domain to advertise to external clients. If specified, then it will be appended to the `external.addresses` values as each broker's advertised address.
	Domain *string `json:"domain,omitempty"`
	// Specifies whether the external access is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Configures the external Service resource.
	Service *ExternalService `json:"service,omitempty"`
	// Source range for external access. Only applicable when `external.type` is LoadBalancer.
	SourceRanges []string `json:"sourceRanges,omitempty"`
	// Specifies the external Service type. Only NodePort and LoadBalancer are supported. If undefined, then advertised listeners will be configured in Redpanda, but the Helm chart will not create a Service. NodePort is recommended in cases where latency is a priority.
	Type *string `json:"type,omitempty"`
	// Defines externalDNS configurations.
	ExternalDNS *ExternalDNS `json:"externalDns,omitempty"`
	// Specifies a naming prefix template for external Services.
	PrefixTemplate *string `json:"prefixTemplate,omitempty"`
}

// Logging configures logging settings in the Helm values. See https://docs.redpanda.com/current/manage/kubernetes/troubleshooting/troubleshoot/.
type Logging struct {
	// Sets the verbosity level of logs.
	LogLevel string `json:"logLevel"`
	// Specifies whether to send usage statistics to Redpanda Data.
	UsageStats *UsageStats `json:"usageStats,omitempty"`
}

// UsageStats configures the reporting of usage statistics. Redpanda Data uses these metrics to learn how the software is used, which can guide future improvements.
type UsageStats struct {
	// Specifies whether usage reporting is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Specifies the name of the organization using the software. This can be useful for identifying and segmenting usage data by organization, if usage reporting is enabled.
	// Deprecated: This value is no longer respected in the redpanda helm chart
	// and will be removed in a future version.
	Organization *string `json:"organization,omitempty"`
	// Specifies the ID of your Redpanda cluster.
	ClusterID *string `json:"clusterId,omitempty"`
}

// Resources configures resource allocation. The default values are for a development environment. Production-level values and other considerations are documented, where those values are different from the default.
type Resources struct {
	// Specifies the number of CPU cores.
	CPU *CPU `json:"cpu,omitempty"`
	// Specifies the amount of memory.
	Memory *Memory `json:"memory,omitempty"`
}

// Storage configures storage-related settings in the Helm values. See https://docs.redpanda.com/current/manage/kubernetes/storage/.
type Storage struct {
	// Specifies the absolute path on the worker node to store the Redpanda data directory. If unspecified, then an `emptyDir` volume is used. If specified but `persistentVolume.enabled` is true, `storage.hostPath` has no effect.
	HostPath *string `json:"hostPath,omitempty"`
	// Configures a PersistentVolumeClaim (PVC) template to create for each Pod. This PVC is used to store the Redpanda data directory.
	PersistentVolume *PersistentVolume `json:"persistentVolume,omitempty"`
	// Configures storage for the Tiered Storage cache.
	Tiered *Tiered `json:"tiered,omitempty"`
}

// CredentialSecretRef can be used to set cloud_storage_secret_key from referenced Kubernetes Secret
type CredentialSecretRef struct {
	AccessKey *SecretWithConfigField `json:"accessKey,omitempty"`
	SecretKey *SecretWithConfigField `json:"secretKey,omitempty"`
}

type SecretWithConfigField struct {
	Key              string `json:"key"`
	Name             string `json:"name"`
	ConfigurationKey string `json:"configurationKey"`
}

// Tiered configures storage for the Tiered Storage cache. See https://docs.redpanda.com/current/manage/kubernetes/tiered-storage-kubernetes/.
type Tiered struct {
	// mountType can be one of:
	//
	// - `none`: Does not mount a volume. Tiered storage will use the same volume as the one defined for the Redpanda data directory.
	// - `hostPath`: Uses the path specified in `hostPath` on the worker node that the Pod is running on.
	// - `emptyDir`: Mounts an empty directory every time the Pod starts.
	// - `persistentVolume`: Creates and mounts a PersistentVolumeClaim using the template defined in `persistentVolume`.
	MountType *string `json:"mountType,omitempty"`
	// Specifies the absolute path on the worker node to store the Tiered Storage cache.
	HostPath *string `json:"hostPath,omitempty"`
	// Configures a PersistentVolumeClaim (PVC) template to create for each Pod. This PVC is used to store the Tiered Storage cache.
	TieredStoragePersistentVolume *TieredStoragePersistentVolume `json:"persistentVolume,omitempty"`
	// Configures Tiered Storage, which requires an Enterprise license configured in `enterprise.licenseKey` or `enterprised.licenseSecretRef`.
	Config *TieredConfig `json:"config,omitempty"`
	// CredentialSecretRef can be used to set `cloud_storage_secret_key` and/or `cloud_storage_access_key` from referenced Kubernetes Secret
	CredentialsSecretRef *CredentialSecretRef `json:"credentialsSecretRef,omitempty"`
}

// TieredConfig configures Tiered Storage, which requires an Enterprise license configured in `enterprise.licenseKey` or `enterprise.licenseSecretRef`.TieredConfig is a top-level field of the Helm values.
type TieredConfig struct {
	// Enables Tiered Storage, if a license key is provided. See https://docs.redpanda.com/docs/reference/cluster-properties/#cloud_storage_enabled.
	CloudStorageEnabled *apiutil.JSONBoolean `json:"cloud_storage_enabled,omitempty"`
	// See https://docs.redpanda.com/docs/reference/cluster-properties/#cloud_storage_api_endpoint.
	CloudStorageAPIEndpoint *string `json:"cloud_storage_api_endpoint,omitempty"`
	// See https://docs.redpanda.com/current/reference/cluster-properties/#cloud_storage_api_endpoint_port.
	CloudStorageAPIEndpointPort *int `json:"cloud_storage_api_endpoint_port,omitempty"`
	// See https://docs.redpanda.com/current/reference/cluster-properties/#cloud_storage_bucket.
	CloudStorageBucket *string `json:"cloud_storage_bucket,omitempty"`
	// See https://docs.redpanda.com/docs/reference/cluster-properties/#cloud_storage_azure_container.
	CloudStorageAzureContainer *string `json:"cloud_storage_azure_container,omitempty"`
	// See https://docs.redpanda.com/docs/reference/cluster-properties/#cloud_storage_azure_managed_identity_id.
	CloudStorageAzureManagedIdentityID *string `json:"cloud_storage_azure_managed_identity_id,omitempty"`
	// See https://docs.redpanda.com/docs/reference/cluster-properties/#cloud_storage_azure_storage_account.
	CloudStorageAzureStorageAccount *string `json:"cloud_storage_azure_storage_account,omitempty"`
	// See https://docs.redpanda.com/docs/reference/cluster-properties/#cloud_storage_azure_shared_key.
	CloudStorageAzureSharedKey *string `json:"cloud_storage_azure_shared_key,omitempty"`
	// See https://docs.redpanda.com/docs/reference/cluster-properties/#cloud_storage_azure_adls_endpoint.
	CloudStorageAzureADLSEndpoint *string `json:"cloud_storage_azure_adls_endpoint,omitempty"`
	// See https://docs.redpanda.com/docs/reference/cluster-properties/#cloud_storage_azure_adls_port.
	CloudStorageAzureADLSPort *int `json:"cloud_storage_azure_adls_port,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_cache_check_interval.
	CloudStorageCacheCheckInterval *int `json:"cloud_storage_cache_check_interval,omitempty"`
	// See https://docs.redpanda.com/current/reference/node-properties/#cloud_storage_cache_directory.
	CloudStorageCacheDirectory *string `json:"cloud_storage_cache_directory,omitempty"`
	// See https://docs.redpanda.com/current/reference/cluster-properties/#cloud_storage_cache_size.
	CloudStorageCacheSize *string `json:"cloud_storage_cache_size,omitempty"`
	// See https://docs.redpanda.com/current/reference/cluster-properties/#cloud_storage_credentials_source.
	CloudStorageCredentialsSource *string `json:"cloud_storage_credentials_source,omitempty"`
	// See https://docs.redpanda.com/current/reference/cluster-properties/#cloud_storage_disable_tls.
	CloudStorageDisableTLS *bool `json:"cloud_storage_disable_tls,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_enable_remote_read.
	CloudStorageEnableRemoteRead *bool `json:"cloud_storage_enable_remote_read,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_enable_remote_write.
	CloudStorageEnableRemoteWrite *bool `json:"cloud_storage_enable_remote_write,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_initial_backoff_ms.
	CloudStorageInitialBackoffMs *int `json:"cloud_storage_initial_backoff_ms,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_manifest_upload_timeout_ms.
	CloudStorageManifestUploadTimeoutMs *int `json:"cloud_storage_manifest_upload_timeout_ms,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_max_connection_idle_time_ms.
	CloudStorageMaxConnectionIdleTimeMs *int `json:"cloud_storage_max_connection_idle_time_ms,omitempty"`
	// See https://docs.redpanda.com/current/reference/cluster-properties/#cloud_storage_max_connections.
	CloudStorageMaxConnections *int `json:"cloud_storage_max_connections,omitempty"`
	// Deprecated: See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_reconciliation_interval_ms.
	CloudStorageReconciliationIntervalMs *int `json:"cloud_storage_reconciliation_interval_ms,omitempty"`
	// See https://docs.redpanda.com/current/reference/cluster-properties/#cloud_storage_region.
	CloudStorageRegion *string `json:"cloud_storage_region,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_segment_max_upload_interval_sec.
	CloudStorageSegmentMaxUploadIntervalSec *int `json:"cloud_storage_segment_max_upload_interval_sec,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_segment_upload_timeout_ms.
	CloudStorageSegmentUploadTimeoutMs *int `json:"cloud_storage_segment_upload_timeout_ms,omitempty"`
	// See https://docs.redpanda.com/current/reference/cluster-properties/#cloud_storage_trust_file.
	CloudStorageTrustFile *string `json:"cloud_storage_trust_file,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_upload_ctrl_d_coeff.
	CloudStorageUploadCtrlDCoeff *int `json:"cloud_storage_upload_ctrl_d_coeff,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_upload_ctrl_max_shares.
	CloudStorageUploadCtrlMaxShares *int `json:"cloud_storage_upload_ctrl_max_shares,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_upload_ctrl_min_shares.
	CloudStorageUploadCtrlMinShares *int `json:"cloud_storage_upload_ctrl_min_shares,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_upload_ctrl_p_coeff.
	CloudStorageUploadCtrlPCoeff *int `json:"cloud_storage_upload_ctrl_p_coeff,omitempty"`
	// See https://docs.redpanda.com/current/reference/tunable-properties/#cloud_storage_upload_ctrl_update_interval_ms.
	CloudStorageUploadCtrlUpdateIntervalMs *int `json:"cloud_storage_upload_ctrl_update_interval_ms,omitempty"`
}

// TieredStoragePersistentVolume configures configurations for a PersistentVolumeClaim to use to store the Tiered Storage cache.
type TieredStoragePersistentVolume struct {
	// Adds annotations to the PersistentVolumeClaims to provide additional information or metadata that can be used by other tools or libraries.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Applies labels to the PersistentVolumeClaims to facilitate identification and selection based on custom criteria.
	Labels map[string]string `json:"labels,omitempty"`
	// Specifies the StorageClass for the PersistentVolumeClaims to determine how PersistentVolumes are provisioned and managed.
	StorageClass *string `json:"storageClass,omitempty"`
}

// PersistentVolume configures configurations for a PersistentVolumeClaim to use to store the Redpanda data directory.
type PersistentVolume struct {
	// Adds annotations to the PersistentVolumeClaims to provide additional information or metadata that can be used by other tools or libraries.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Specifies whether to enable the Helm chart to create PersistentVolumeClaims for Pods.
	Enabled *bool `json:"enabled,omitempty"`
	// Applies labels to the PersistentVolumeClaims to facilitate identification and selection based on custom criteria.
	Labels map[string]string `json:"labels,omitempty"`
	// Specifies the storage capacity required.
	Size *resource.Quantity `json:"size,omitempty"`
	// Specifies the StorageClass for the PersistentVolumeClaims to determine how PersistentVolumes are provisioned and managed.
	StorageClass *string `json:"storageClass,omitempty"`
	// Option to change volume claim template name for tiered storage persistent volume if tiered.mountType is set to `persistentVolume`
	NameOverwrite *string `json:"nameOverwrite,omitempty"`
}

// PostInstallJob configures configurations for the post-install job that run after installation of the Helm chart.
type PostInstallJob struct {
	// Sets resource requirements (CPU, memory) for the job to ensure proper allocation and limit resource usage.
	Resources *corev1.ResourceRequirements `json:"resources,omitempty"`
	// Adds annotations to the job to provide additional information or metadata that can be used by other tools or libraries.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Specifies whether the job is deployed.
	Enabled bool `json:"enabled"`
	// Applies labels to the job to facilitate identification and selection based on custom criteria.
	Labels map[string]string `json:"labels,omitempty"`
}

// PostUpgradeJob configures configurations for the post-upgrade job that run after each upgrade of the Helm chart.
type PostUpgradeJob struct {
	// Adds annotations to the job to provide additional information or metadata that can be used by other tools or libraries.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Specifies whether the job is deployed.
	Enabled bool `json:"enabled"`
	// Applies labels to the job to facilitate identification and selection based on custom criteria.
	Labels map[string]string `json:"labels,omitempty"`
	// +patchMergeKey=name
	// +patchStrategy=merge
	// Adds environment variables to the job container to configure its runtime behavior.
	ExtraEnv []corev1.EnvVar `json:"extraEnv,omitempty" patchStrategy:"merge" patchMergeKey:"name"`
	// Specifies environment variables from external sources, such as ConfigMap resources, or Secret resources, to dynamically configure the job.
	ExtraEnvFrom []corev1.EnvFromSource `json:"extraEnvFrom,omitempty"`
	// Sets resource requirements (CPU, memory) for the job to ensure proper allocation and limit resource usage.
	Resources *corev1.ResourceRequirements `json:"resources,omitempty"`
}

// Statefulset defines configurations for the StatefulSet in Helm values.
type Statefulset struct {
	// Includes additional command flags for Redpanda at startup to customize its runtime behavior.
	AdditionalRedpandaCmdFlags []string `json:"additionalRedpandaCmdFlags,omitempty"`
	// Adds annotations to the StatefulSet to provide additional information or metadata.
	// Please use PodTemplate to add additional annotation or labels for Pods managed by Statefulset.
	Annotations map[string]string `json:"annotations,omitempty"`
	// PodTemplate will pass label and annotation to Statefulset Pod template.
	PodTemplate *PodTemplate `json:"podTemplate,omitempty"`
	// Defines the management of disruptions affecting the Pods in the StatefulSet.
	Budget *Budget `json:"budget,omitempty"`
	// Specifies extra volume mounts for the Pods.
	ExtraVolumeMounts string `json:"extraVolumeMounts,omitempty"`
	// Defines additional volumes for the Pods.
	ExtraVolumes string `json:"extraVolumes,omitempty"`
	// Defines the init container image used to perform initial setup tasks before the main containers start.
	InitContainerImage *InitContainerImage `json:"initContainerImage,omitempty"`
	// Configures the init container used to perform initial setup tasks before the main containers start.
	InitContainers *InitContainers `json:"initContainers,omitempty"`
	// Defines liveness probes to monitor the health of the Pods and restart them if necessary.
	LivenessProbe *LivenessProbe `json:"livenessProbe,omitempty"`
	// Applies node selectors to schedule Pods on specific nodes based on labels.
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`
	// Defines Pod affinity rules to influence the scheduling and placement of Pods relative to other Pods.
	PodAffinity *corev1.PodAffinity `json:"podAffinity,omitempty"`
	// Defines Pod anti-affinity rules to prevent Pods from being scheduled together on the same node.
	PodAntiAffinity *PodAntiAffinity `json:"podAntiAffinity,omitempty"`
	// Defines the priority class name to assign priority levels to the Pods, influencing their scheduling order.
	PriorityClassName *string `json:"priorityClassName,omitempty"`
	// Defines readiness probes to determine when a Pod is ready to handle traffic.
	ReadinessProbe *ReadinessProbe `json:"readinessProbe,omitempty"`
	// Specifies the number of replicas to determine the desired number of Pods (Redpanda brokers) in the StatefulSet.
	Replicas *int `json:"replicas,omitempty"`
	// Sets a security context for the Pods to define privilege and access control settings.
	SecurityContext *corev1.SecurityContext `json:"securityContext,omitempty"`
	// Defines the additional sidecar containers that run alongside the main Redpanda container in the Pod.
	SideCars *SideCars `json:"sideCars,omitempty"`
	// Specifies whether to skip the changing of file ownership (chown) during Pod initialization.
	SkipChown *bool `json:"skipChown,omitempty"`
	// Configures the startup probe to determine when the Redpanda application within the Pod has started successfully.
	StartupProbe *StartupProbe `json:"startupProbe,omitempty"`
	// Applies tolerations to allow Pods to be scheduled on nodes with matching taints, enabling control over where Pods can run.
	Tolerations []corev1.Toleration `json:"tolerations,omitempty"`
	// Defines topology spread constraints to control how Pods are spread across different topology domains.
	TopologySpreadConstraints []*TopologySpreadConstraints `json:"topologySpreadConstraints,omitempty"`
	// Defines the update strategy for the StatefulSet to manage how updates are rolled out to the Pods.
	UpdateStrategy *UpdateStrategy `json:"updateStrategy,omitempty"`
	// Specifies the termination grace period in seconds to control the time delay before forcefully terminating a Pod.
	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds,omitempty"`
}

// PodTemplate will pass label and annotation to Statefulset Pod template.
type PodTemplate struct {
	Labels      map[string]string `json:"labels,omitempty"`
	Annotations map[string]string `json:"annotations,omitempty"`
}

// Budget configures the management of disruptions affecting the Pods in the StatefulSet.
type Budget struct {
	// Defines the maximum number of Pods that can be unavailable during a voluntary disruption.
	MaxUnavailable int `json:"maxUnavailable"`
}

// LivenessProbe configures liveness probes to monitor the health of the Pods and restart them if necessary.
type LivenessProbe struct {
	// Sets the number of consecutive failures required to consider a Pod as not live.
	FailureThreshold *int `json:"failureThreshold,omitempty"`
	// Specifies the time in seconds to wait before the first probe is initiated.
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty"`
	// Determines the frequency in seconds of performing the probe.
	PeriodSeconds *int `json:"periodSeconds,omitempty"`
}

// ReadinessProbe configures readiness probes to determine when a Pod is ready to handle traffic.
type ReadinessProbe struct {
	// Defines the threshold for how many times the probe can fail before the Pod is marked Unready.
	FailureThreshold *int `json:"failureThreshold,omitempty"`
	// Sets the initial delay before the readiness probe is initiated, in seconds.
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty"`
	// Configures the period, in seconds, between each readiness check.
	PeriodSeconds *int `json:"periodSeconds,omitempty"`
}

// StartupProbe configures the startup probe to determine when the Redpanda application within the Pod has started successfully.
type StartupProbe struct {
	// Determines the failure threshold to mark the application in the Pod as not started.
	FailureThreshold *int `json:"failureThreshold,omitempty"`
	// Specifies the delay in seconds before the startup probe begins.
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty"`
	// Sets the period in seconds for conducting subsequent probes.
	PeriodSeconds *int `json:"periodSeconds,omitempty"`
}

// PodAntiAffinity configures Pod anti-affinity rules to prevent Pods from being scheduled together on the same node.
type PodAntiAffinity struct {
	// TopologyKey specifies the topology key used to spread Pods across different nodes or other topologies.
	TopologyKey *string `json:"topologyKey,omitempty"`
	// Type defines the type of anti-affinity, such as `soft` or `hard`.
	Type *string `json:"type,omitempty"`
	// Weight sets the weight associated with the soft anti-affinity rule.
	Weight *int `json:"weight,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Custom configures additional custom anti-affinity rules.
	Custom *runtime.RawExtension `json:"custom,omitempty"`
}

// TopologySpreadConstraints configures topology spread constraints to control how Pods are spread across different topology domains.
type TopologySpreadConstraints struct {
	// Defines the maximum skew between the number of Pods in any two topology domains.
	MaxSkew int `json:"maxSkew"`
	// Specifies the topology key to use for spreading Pods.
	TopologyKey string `json:"topologyKey"`
	// Sets the policy for how to handle unsatisfiable constraints, such as `DoNotSchedule` or `ScheduleAnyway`.
	WhenUnsatisfiable string `json:"whenUnsatisfiable"`
}

// UpdateStrategy configures the update strategy for the StatefulSet to manage how updates are rolled out to the Pods.
type UpdateStrategy struct {
	// Defines the strategy type for updating the StatefulSet, such as `RollingUpdate` or `OnDelete`.
	Type string `json:"type"`
}

// Tuning configures settings for the autotuner tool in Redpanda. The autotuner identifies the hardware configuration in the container and optimizes the Linux kernel to give you the best performance.
type Tuning struct {
	// Configures additional volume mounts for the Pod.
	ExtraVolumeMounts string `json:"extraVolumeMounts,omitempty"`
	// Sets resource requirements such as CPU and memory limits.
	Resources *corev1.ResourceRequirements `json:"resources,omitempty"`
	// Specifies the file path for ballast file. A ballast file is an empty file that takes up disk space. If Redpanda runs out of disk space and becomes unavailable, you can delete the ballast file as a last resort. This clears up some space and gives you time to delete topics or records and change your retention properties.
	BallastFilePath *string `json:"ballast_file_path,omitempty"`
	// Defines the size of the ballast file.
	BallastFileSize *string `json:"ballast_file_size,omitempty"`
	// Specifies whether to increase the number of allowed asynchronous IO events.
	TuneAioEvents *bool `json:"tune_aio_events,omitempty"`
	// Specifies whether to create the ballast file.
	TuneBallastFile *bool `json:"tune_ballast_file,omitempty"`
	// Specifies whether to synchronize NTP.
	TuneClockSource *bool `json:"tune_clocksource,omitempty"`
	// Specifies the vendor, VM type, and storage device type that Redpanda runs on, in the format <vendor>:<vm>:<storage>. This hints to Redpanda which configuration values it should use for the Redpanda IO scheduler.
	WellKnownIo *string `json:"well_known_io,omitempty"`
}

// Listeners configures settings for listeners, including HTTP Proxy, Schema Registry, the Admin API and the Kafka API. See https://docs.redpanda.com/current/manage/kubernetes/networking/configure-listeners/.
type Listeners struct {
	// Configures settings for the Admin API listeners.
	Admin *Admin `json:"admin,omitempty"`
	// Configures settings for the HTTP Proxy listeners.
	HTTP *HTTP `json:"http,omitempty"`
	// Configures settings for the Kafka API listeners.
	Kafka *Kafka `json:"kafka,omitempty"`
	// Configures settings for the RPC API listener.
	RPC *RPC `json:"rpc,omitempty"`
	// Configures settings for the Schema Registry listeners.
	SchemaRegistry *SchemaRegistry `json:"schemaRegistry,omitempty"`
}

// ExternalListener configures settings for the external listeners.
type ExternalListener struct {
	Enabled *bool `json:"enabled,omitempty"`
	// Specifies the authentication method for the external listener. For example, 'mtls_identity' or `sasl`.
	AuthenticationMethod *string `json:"authenticationMethod,omitempty"`
	// Specifies the container port number for the external listener.
	Port *int `json:"port,omitempty"`
	// Configures TLS settings for the external listener.
	TLS *ListenerTLS `json:"tls,omitempty"`
	// Specifies the network port that the external Service listens on.
	AdvertisedPorts []int `json:"advertisedPorts,omitempty"`
}

// Admin configures settings for the Admin API listeners.
type Admin struct {
	// Defines settings for the external listener.
	External map[string]*ExternalListener `json:"external,omitempty"`
	// Specifies the container port number for the internal listener.
	Port *int `json:"port,omitempty"`
	// Configures TLS settings for the internal listener.
	TLS *ListenerTLS `json:"tls,omitempty"`
}

// HTTP configures settings for the HTTP Proxy listeners.
type HTTP struct {
	// Specifies the authentication method for the external listener. For example, 'mtls_identity' or `sasl`.
	AuthenticationMethod *string `json:"authenticationMethod,omitempty"`
	// Specifies whether the HTTP Proxy is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Defines settings for the external listener.
	External map[string]*ExternalListener `json:"external,omitempty"`
	// Configures the listener to use for HTTP connections. For example `default` for the internal listener.
	KafkaEndpoint *string `json:"kafkaEndpoint,omitempty"`
	// Specifies the container port number for the internal listener.
	Port *int `json:"port,omitempty"`
	// Configures TLS settings for the internal listener.
	TLS *ListenerTLS `json:"tls,omitempty"`
	// Specifies the template used for generating the advertised addresses of Services. This field accepts a string template that dynamically constructs Service addresses based on various parameters such as Service name and port number.
	PrefixTemplate *string `json:"prefixTemplate,omitempty"`
}

// Kafka configures settings for the Kafka API listeners.
type Kafka struct {
	// Specifies the authentication method for the external listener. For example, 'mtls_identity' or `sasl`.
	AuthenticationMethod *string `json:"authenticationMethod,omitempty"`
	// Defines settings for the external listener.
	External map[string]*ExternalListener `json:"external,omitempty"`
	// Specifies the container port number for the internal listener.
	Port *int `json:"port,omitempty"`
	// Configures TLS settings for the internal listener.
	TLS *ListenerTLS `json:"tls,omitempty"`
	// Specifies the template used for generating the advertised addresses of Services. This field accepts a string template that dynamically constructs Service addresses based on various parameters such as Service name and port number.
	PrefixTemplate *string `json:"prefixTemplate,omitempty"`
}

// RPC configures settings for the RPC API listeners.
type RPC struct {
	// Specifies the container port number for the internal listener.
	Port *int `json:"port,omitempty"`
	// Configures TLS settings for the internal listener.
	TLS *ListenerTLS `json:"tls,omitempty"`
}

// SchemaRegistry configures settings for the Schema Registry listeners.
type SchemaRegistry struct {
	// Specifies the authentication method for the external listener. For example, 'mtls_identity' or `sasl`.
	AuthenticationMethod *string `json:"authenticationMethod,omitempty"`
	// Specifies whether the Schema Registry is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Defines settings for the external listener.
	External map[string]*ExternalListener `json:"external,omitempty"`
	// Configures the listener to use for HTTP connections. For example `default` for the internal listener.
	KafkaEndpoint *string `json:"kafkaEndpoint,omitempty"`
	// Specifies the container port number for the internal listener.
	Port *int `json:"port,omitempty"`
	// Configures TLS settings for the internal listener.
	TLS *ListenerTLS `json:"tls,omitempty"`
}

// Config configures Redpanda config properties supported by Redpanda that may not work correctly in a Kubernetes cluster. Changing these values from the defaults comes with some risk. Use these properties to customize various Redpanda configurations that are not available in the `RedpandaClusterSpec`. These values have no impact on the configuration or behavior of the Kubernetes objects deployed by Helm, and therefore should not be modified for the purpose of configuring those objects. Instead, these settings get passed directly to the Redpanda binary at startup.
type Config struct {
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies cluster configuration properties. See https://docs.redpanda.com/current/reference/cluster-properties/.
	RPK *runtime.RawExtension `json:"rpk,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies cluster configuration properties. See https://docs.redpanda.com/current/reference/cluster-properties/.
	Cluster *runtime.RawExtension `json:"cluster,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies broker configuration properties. See https://docs.redpanda.com/current/reference/node-properties/.
	Node *runtime.RawExtension `json:"node,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies tunable configuration properties. See https://docs.redpanda.com/current/reference/tunable-properties/.
	Tunable *runtime.RawExtension `json:"tunable,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies tunable configuration properties. See https://docs.redpanda.com/current/reference/tunable-properties/.
	SchemaRegistryClient *runtime.RawExtension `json:"schema_registry_client,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies tunable configuration properties. See https://docs.redpanda.com/current/reference/tunable-properties/.
	PandaProxyClient *runtime.RawExtension `json:"pandaproxy_client,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
}

// SideCars configures the additional sidecar containers that run alongside the main Redpanda container in the Pod.
type SideCars struct {
	// Configures the `config-watcher` sidecar. The `config-watcher` sidecar polls the Secret resource in `auth.sasl.secretRef` for changes and triggers a rolling upgrade to add the new superusers to the Redpanda cluster.
	ConfigWatcher *ConfigWatcher `json:"configWatcher,omitempty"`
	RpkStatus     *SideCarObj    `json:"rpkStatus,omitempty"`
	Controllers   *RPControllers `json:"controllers,omitempty"`
}

// RPControllers configures additional controllers that can be deployed as sidecars in rp helm
type RPControllers struct {
	// Specifies whether the Controllers are enabled.
	Enabled            *bool                        `json:"enabled,omitempty"`
	Resources          *corev1.ResourceRequirements `json:"resources,omitempty"`
	SecurityContext    *corev1.SecurityContext      `json:"securityContext,omitempty"`
	Image              *RedpandaImage               `json:"image,omitempty"`
	HealthProbeAddress *string                      `json:"healthProbeAddress,omitempty"`
	MetricsAddress     *string                      `json:"metricsAddress,omitempty"`
	Run                []string                     `json:"run,omitempty"`
	CreateRBAC         *bool                        `json:"createRBAC,omitempty"`
}

// CPU configures CPU resources for containers. See https://docs.redpanda.com/current/manage/kubernetes/manage-resources/.
type CPU struct {
	// Specifies the number of CPU cores available to the application. Redpanda makes use of a thread per core model. For details, see https://docs.redpanda.com/current/get-started/architecture/#thread-per-core-model. For this reason, Redpanda should only be given full cores. Note: You can increase cores, but decreasing cores is not currently supported. See the GitHub issue:https://github.com/redpanda-data/redpanda/issues/350. This setting is equivalent to `--smp`, `resources.requests.cpu`, and `resources.limits.cpu`. For production, use `4` or greater.
	Cores *resource.Quantity `json:"cores,omitempty"`
	// Specifies whether Redpanda assumes it has all of the provisioned CPU. This should be `true` unless the container has CPU affinity. Equivalent to: `--idle-poll-time-us 0`, `--thread-affinity 0`, and `--poll-aio 0`. If the value of full cores in `resources.cpu.cores` is less than `1`, this setting is set to `true`.
	Overprovisioned *bool `json:"overprovisioned,omitempty"`
}

// Container defines resource limits for containers.
type Container struct {
	// Specifies the maximum resources that can be allocated to a container.
	Max *resource.Quantity `json:"max,omitempty"`
	// Specifies the minimum resources required for a container.
	Min *resource.Quantity `json:"min,omitempty"`
}

// Memory configures memory resources.
type Memory struct {
	// Defines resource limits for containers.
	Container *Container `json:"container,omitempty"`
	// Enables memory locking. For production, set to `true`.
	EnableMemoryLocking *bool `json:"enable_memory_locking,omitempty"`
	// Allows you to optionally specify the memory size for both the Redpanda process and the underlying reserved memory used by Seastar.
	Redpanda *RedpandaMemory `json:"redpanda,omitempty"`
}

// RedpandaMemory allows you to optionally specify the memory size for both the Redpanda process and the underlying reserved memory used by Seastar. This section is omitted by default, and memory sizes are calculated automatically based on container memory. Configuring this section and setting `memory` and `reserveMemory` values will disable automatic calculation.
// If you are setting the following values manually, keep in mind the following guidelines. Getting this wrong may lead to performance issues, instability, and loss of data: The amount of memory to allocate to a container is determined by the sum of three values:
//
// 1. Redpanda (at least 2Gi per core, ~80% of the container's total memory)
// 2. Seastar subsystem (200Mi * 0.2% of the container's total memory, 200Mi < x < 1Gi)
// 3. Other container processes (whatever small amount remains)
type RedpandaMemory struct {
	// Memory for the Redpanda process. This must be lower than the container's memory (`resources.memory.container.min` if provided, otherwise `resources.memory.container.max`). Equivalent to `--memory`. For production, use 8Gi or greater.
	Memory *resource.Quantity `json:"memory,omitempty"`
	// Memory reserved for the Seastar subsystem. Any value above 1Gi will provide diminishing performance benefits. Equivalent to `--reserve-memory`. For production, use 1Gi.
	ReserveMemory *resource.Quantity `json:"reserveMemory,omitempty"`
}

// RBAC configures role-based access control (RBAC).
type RBAC struct {
	// Adds custom annotations to the RBAC resources.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Whether RBAC is enabled. Enable for features that need extra privileges, such as rack awareness. If you use the Redpanda Operator, you must deploy it with the `--set rbac.createRPKBundleCRs=true` flag to give it the required ClusterRoles.
	Enabled bool `json:"enabled"`
}

// ServiceAccount configures Service Accounts.
type ServiceAccount struct {
	// Adds custom annotations to the ServiceAccount resources.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Specifies whether a ServiceAccount should be created.
	Create bool `json:"create"`
	// Specifies the name of the ServiceAccount.
	Name *string `json:"name,omitempty"`
}

// SetDataDirOwnership defines the settings related to ownership of the Redpanda data directory in environments where root access is restricted.
type SetDataDirOwnership struct {
	// Specifies whether to enable root access. Enable only in environments where root access is not allowed, such as minikube.
	Enabled *bool `json:"enabled,omitempty"`
	// Adds extra volume mounts.
	ExtraVolumeMounts string `json:"extraVolumeMounts,omitempty"`
	// Specifies the resource requirements.
	Resources *corev1.ResourceRequirements `json:"resources,omitempty"`
}

// InitContainerImage configures the init container image used to perform initial setup tasks before the main containers start.
type InitContainerImage struct {
	Repository *string `json:"repository,omitempty"`
	Tag        *string `json:"tag,omitempty"`
}

// InitContainers configures the init container used to perform initial setup tasks before the main containers start.
type InitContainers struct {
	Configurator        *Configurator `json:"configurator,omitempty"`
	ExtraInitContainers string        `json:"extraInitContainers,omitempty"`
	// Defines the settings related to ownership of the Redpanda data directory in environments where root access is restricted.
	SetDataDirOwnership *SetDataDirOwnership `json:"setDataDirOwnership,omitempty"`
	// Defines the settings related to ownership of the Tiered Storage cache in environments where root access is restricted.
	SetTieredStorageCacheDirOwnership *SetTieredStorageCacheDirOwnership `json:"setTieredStorageCacheDirOwnership,omitempty"`
	// Defines the setting for init container that not allow to start Redpanda until filesystem matches
	FsValidator *FsValidator `json:"fsValidator,omitempty"`
	// Defines settings for the autotuner tool in Redpanda. The autotuner identifies the hardware configuration in the container and optimizes the Linux kernel to give you the best performance.
	Tuning *Tuning `json:"tuning,omitempty"`
}

type FsValidator struct {
	Enabled    *bool   `json:"enabled,omitempty"`
	ExpectedFS *string `json:"expectedFS,omitempty"`
	// Adds extra volume mounts.
	ExtraVolumeMounts *string `json:"extraVolumeMounts,omitempty"`
	// Specifies the resource requirements.
	Resources *corev1.ResourceRequirements `json:"resources,omitempty"`
}

type Configurator struct {
	ExtraVolumeMounts *string                      `json:"extraVolumeMounts,omitempty"`
	Resources         *corev1.ResourceRequirements `json:"resources,omitempty"`
}

// SetTieredStorageCacheDirOwnership configures the settings related to ownership of the Tiered Storage cache in environments where root access is restricted.
type SetTieredStorageCacheDirOwnership struct {
	ExtraVolumeMounts *string                      `json:"extraVolumeMounts,omitempty"`
	Resources         *corev1.ResourceRequirements `json:"resources,omitempty"`
}

// Monitoring configures monitoring resources for Redpanda. See https://docs.redpanda.com/current/manage/kubernetes/monitoring/monitor-redpanda/.
type Monitoring struct {
	// Specifies whether to create a ServiceMonitor that can be used by Prometheus Operator or VictoriaMetrics Operator to scrape the metrics.
	Enabled bool `json:"enabled,omitempty"`
	// Adds custom labels to the ServiceMonitor resource.
	Labels map[string]string `json:"labels,omitempty"`
	// Specifies how often to scrape metrics.
	ScrapeInterval *string `json:"scrapeInterval,omitempty"`
	// +kubebuilder:pruning:PreserveUnknownFields
	// Specifies tls configuration properties.
	TLSConfig *runtime.RawExtension `json:"tlsConfig,omitempty"`
}

// ConnectorMonitoring configures monitoring resources for Connectors. See https://docs.redpanda.com/current/manage/kubernetes/monitoring/monitor-redpanda/.
type ConnectorMonitoring struct {
	// Specifies whether to create a ServiceMonitor that can be used by Prometheus Operator or VictoriaMetrics Operator to scrape the metrics.
	Enabled bool `json:"enabled,omitempty"`
	// Adds custom labels to the ServiceMonitor resource.
	Labels map[string]string `json:"labels,omitempty"`
	// Specifies how often to scrape metrics.
	ScrapeInterval *string `json:"scrapeInterval,omitempty"`
	// Adds custom Annotations to the ServiceMonitor resource.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Adds custom namespaceSelector to monitoring resources
	NamespaceSelector map[string]string `json:"namespaceSelector,omitempty"`
}

// ExternalDNS configures externalDNS.
type ExternalDNS struct {
	// Specifies whether externalDNS annotations are added to LoadBalancer Services. If you enable externalDns, each LoadBalancer Service defined in `external.type` will be annotated with an external-dns hostname that matches `external.addresses[i]`.`external.domain`.
	Enabled bool `json:"enabled,omitempty"`
}

// SideCarObj represents a generic sidecar object. This is a placeholder for now.
type SideCarObj struct {
	Enabled         bool                         `json:"enabled,omitempty"`
	Resources       *corev1.ResourceRequirements `json:"resources,omitempty"`
	SecurityContext *corev1.SecurityContext      `json:"securityContext,omitempty"`
}

// EnterpriseLicenseSecretRef configures a reference to a Secret resource that contains the Enterprise license key.
type EnterpriseLicenseSecretRef struct {
	// Specifies the key that is contains the Enterprise license in the Secret.
	Key string `json:"key,omitempty"`
	// Specifies the name of the Secret resource to use.
	Name string `json:"name,omitempty"`
}

// Enterprise configures an Enterprise license key to enable Redpanda Enterprise features. Requires the post-install job to be enabled (default). See https://docs.redpanda.com/current/get-started/licenses/.
type Enterprise struct {
	// Specifies the Enterprise license key.
	License *string `json:"license,omitempty"`
	// Defines a reference to a Secret resource that contains the Enterprise license key.
	LicenseSecretRef *EnterpriseLicenseSecretRef `json:"licenseSecretRef,omitempty"`
}

type ServiceInternal struct {
	Annotations map[string]string `json:"annotations,omitempty"`
}

type Service struct {
	Name     *string          `json:"name,omitempty"`
	Internal *ServiceInternal `json:"internal,omitempty"`
}

// AuditLogging configures how to perform audit logging for a redpanda cluster
type AuditLogging struct {
	// Specifies whether to enable audit logging or not
	Enabled *bool `json:"enabled,omitempty"`
	// Kafka external listener name, note that it must have `authenticationMethod` set to sasl
	Listener *string `json:"listener,omitempty"`
	// Integer value defining the number of partitions used by a newly created audit topic
	Partitions *int32 `json:"partitions,omitempty"`
	// Event types that should be captured by audit logs
	EnabledEventTypes []string `json:"enabledEventTypes,omitempty"`
	// List of topics to exclude from auditing
	ExcludedTopics []string `json:"excludedTopics,omitempty"`
	// List of principals to exclude from auditing
	ExcludedPrincipals []string `json:"excludedPrincipals,omitempty"`
	// Defines the number of bytes (in bytes) allocated by the internal audit client for audit messages.
	ClientMaxBufferSize *int32 `json:"clientMaxBufferSize,omitempty"`
	// In ms, frequency in which per shard audit logs are batched to client for write to audit log.
	QueueDrainIntervalMs *int32 `json:"queueDrainIntervalMs,omitempty"`
	// Defines the maximum amount of memory used (in bytes) by the audit buffer in each shard
	QueueMaxBufferSizePerShard *int32 `json:"queueMaxBufferSizePerShard,omitempty"`
	// Defines the replication factor for a newly created audit log topic. This configuration applies
	// only to the audit log topic and may be different from the cluster or other topic configurations.
	// This cannot be altered for existing audit log topics. Setting this value is optional. If a value is not provided,
	// Redpanda will use the `internal_topic_replication_factor` cluster config value. Default is `null`
	ReplicationFactor *int32 `json:"replicationFactor,omitempty"`
}
