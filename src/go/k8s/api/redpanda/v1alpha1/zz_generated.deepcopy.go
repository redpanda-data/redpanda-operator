//go:build !ignore_autogenerated

// Copyright 2022 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/fluxcd/helm-controller/api/v2beta2"
	"github.com/redpanda-data/redpanda-operator/src/go/k8s/api/redpanda/v1alpha2"
	"k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmUpgrade) DeepCopyInto(out *HelmUpgrade) {
	*out = *in
	if in.Remediation != nil {
		in, out := &in.Remediation, &out.Remediation
		*out = new(v2beta2.UpgradeRemediation)
		(*in).DeepCopyInto(*out)
	}
	if in.Force != nil {
		in, out := &in.Force, &out.Force
		*out = new(bool)
		**out = **in
	}
	if in.PreserveValues != nil {
		in, out := &in.PreserveValues, &out.PreserveValues
		*out = new(bool)
		**out = **in
	}
	if in.CleanupOnFail != nil {
		in, out := &in.CleanupOnFail, &out.CleanupOnFail
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmUpgrade.
func (in *HelmUpgrade) DeepCopy() *HelmUpgrade {
	if in == nil {
		return nil
	}
	out := new(HelmUpgrade)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Redpanda) DeepCopyInto(out *Redpanda) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Redpanda.
func (in *Redpanda) DeepCopy() *Redpanda {
	if in == nil {
		return nil
	}
	out := new(Redpanda)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Redpanda) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedpandaClusterSpec) DeepCopyInto(out *RedpandaClusterSpec) {
	*out = *in
	if in.CommonLabels != nil {
		in, out := &in.CommonLabels, &out.CommonLabels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.NodeSelector != nil {
		in, out := &in.NodeSelector, &out.NodeSelector
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Image != nil {
		in, out := &in.Image, &out.Image
		*out = new(v1alpha2.RedpandaImage)
		(*in).DeepCopyInto(*out)
	}
	if in.ImagePullSecrets != nil {
		in, out := &in.ImagePullSecrets, &out.ImagePullSecrets
		*out = make([]v1.LocalObjectReference, len(*in))
		copy(*out, *in)
	}
	if in.LicenseKey != nil {
		in, out := &in.LicenseKey, &out.LicenseKey
		*out = new(string)
		**out = **in
	}
	if in.LicenseSecretRef != nil {
		in, out := &in.LicenseSecretRef, &out.LicenseSecretRef
		*out = new(v1alpha2.LicenseSecretRef)
		(*in).DeepCopyInto(*out)
	}
	if in.Enterprise != nil {
		in, out := &in.Enterprise, &out.Enterprise
		*out = new(v1alpha2.Enterprise)
		(*in).DeepCopyInto(*out)
	}
	if in.RackAwareness != nil {
		in, out := &in.RackAwareness, &out.RackAwareness
		*out = new(v1alpha2.RackAwareness)
		(*in).DeepCopyInto(*out)
	}
	if in.Console != nil {
		in, out := &in.Console, &out.Console
		*out = new(v1alpha2.RedpandaConsole)
		(*in).DeepCopyInto(*out)
	}
	if in.Connectors != nil {
		in, out := &in.Connectors, &out.Connectors
		*out = new(v1alpha2.RedpandaConnectors)
		(*in).DeepCopyInto(*out)
	}
	if in.Auth != nil {
		in, out := &in.Auth, &out.Auth
		*out = new(v1alpha2.Auth)
		(*in).DeepCopyInto(*out)
	}
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(v1alpha2.TLS)
		(*in).DeepCopyInto(*out)
	}
	if in.External != nil {
		in, out := &in.External, &out.External
		*out = new(v1alpha2.External)
		(*in).DeepCopyInto(*out)
	}
	if in.Logging != nil {
		in, out := &in.Logging, &out.Logging
		*out = new(v1alpha2.Logging)
		(*in).DeepCopyInto(*out)
	}
	if in.AuditLogging != nil {
		in, out := &in.AuditLogging, &out.AuditLogging
		*out = new(v1alpha2.AuditLogging)
		(*in).DeepCopyInto(*out)
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1alpha2.Resources)
		(*in).DeepCopyInto(*out)
	}
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(v1alpha2.Service)
		(*in).DeepCopyInto(*out)
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = new(Storage)
		(*in).DeepCopyInto(*out)
	}
	if in.PostInstallJob != nil {
		in, out := &in.PostInstallJob, &out.PostInstallJob
		*out = new(v1alpha2.PostInstallJob)
		(*in).DeepCopyInto(*out)
	}
	if in.PostUpgradeJob != nil {
		in, out := &in.PostUpgradeJob, &out.PostUpgradeJob
		*out = new(v1alpha2.PostUpgradeJob)
		(*in).DeepCopyInto(*out)
	}
	if in.Statefulset != nil {
		in, out := &in.Statefulset, &out.Statefulset
		*out = new(v1alpha2.Statefulset)
		(*in).DeepCopyInto(*out)
	}
	if in.Tuning != nil {
		in, out := &in.Tuning, &out.Tuning
		*out = new(v1alpha2.Tuning)
		(*in).DeepCopyInto(*out)
	}
	if in.Listeners != nil {
		in, out := &in.Listeners, &out.Listeners
		*out = new(v1alpha2.Listeners)
		(*in).DeepCopyInto(*out)
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(v1alpha2.Config)
		(*in).DeepCopyInto(*out)
	}
	if in.RBAC != nil {
		in, out := &in.RBAC, &out.RBAC
		*out = new(v1alpha2.RBAC)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccount != nil {
		in, out := &in.ServiceAccount, &out.ServiceAccount
		*out = new(v1alpha2.ServiceAccount)
		(*in).DeepCopyInto(*out)
	}
	if in.Monitoring != nil {
		in, out := &in.Monitoring, &out.Monitoring
		*out = new(v1alpha2.Monitoring)
		(*in).DeepCopyInto(*out)
	}
	if in.Force != nil {
		in, out := &in.Force, &out.Force
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedpandaClusterSpec.
func (in *RedpandaClusterSpec) DeepCopy() *RedpandaClusterSpec {
	if in == nil {
		return nil
	}
	out := new(RedpandaClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedpandaList) DeepCopyInto(out *RedpandaList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Redpanda, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedpandaList.
func (in *RedpandaList) DeepCopy() *RedpandaList {
	if in == nil {
		return nil
	}
	out := new(RedpandaList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RedpandaList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedpandaSpec) DeepCopyInto(out *RedpandaSpec) {
	*out = *in
	in.ChartRef.DeepCopyInto(&out.ChartRef)
	if in.ClusterSpec != nil {
		in, out := &in.ClusterSpec, &out.ClusterSpec
		*out = new(RedpandaClusterSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = new(v1alpha2.Migration)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedpandaSpec.
func (in *RedpandaSpec) DeepCopy() *RedpandaSpec {
	if in == nil {
		return nil
	}
	out := new(RedpandaSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Storage) DeepCopyInto(out *Storage) {
	*out = *in
	if in.HostPath != nil {
		in, out := &in.HostPath, &out.HostPath
		*out = new(string)
		**out = **in
	}
	if in.PersistentVolume != nil {
		in, out := &in.PersistentVolume, &out.PersistentVolume
		*out = new(v1alpha2.PersistentVolume)
		(*in).DeepCopyInto(*out)
	}
	if in.Tiered != nil {
		in, out := &in.Tiered, &out.Tiered
		*out = new(Tiered)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Storage.
func (in *Storage) DeepCopy() *Storage {
	if in == nil {
		return nil
	}
	out := new(Storage)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Tiered) DeepCopyInto(out *Tiered) {
	*out = *in
	if in.MountType != nil {
		in, out := &in.MountType, &out.MountType
		*out = new(string)
		**out = **in
	}
	if in.HostPath != nil {
		in, out := &in.HostPath, &out.HostPath
		*out = new(string)
		**out = **in
	}
	if in.TieredStoragePersistentVolume != nil {
		in, out := &in.TieredStoragePersistentVolume, &out.TieredStoragePersistentVolume
		*out = new(v1alpha2.TieredStoragePersistentVolume)
		(*in).DeepCopyInto(*out)
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(TieredConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.CredentialsSecretRef != nil {
		in, out := &in.CredentialsSecretRef, &out.CredentialsSecretRef
		*out = new(v1alpha2.CredentialSecretRef)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Tiered.
func (in *Tiered) DeepCopy() *Tiered {
	if in == nil {
		return nil
	}
	out := new(Tiered)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TieredConfig) DeepCopyInto(out *TieredConfig) {
	*out = *in
	if in.CloudStorageEnabled != nil {
		in, out := &in.CloudStorageEnabled, &out.CloudStorageEnabled
		*out = new(BoolString)
		**out = **in
	}
	if in.CloudStorageAPIEndpoint != nil {
		in, out := &in.CloudStorageAPIEndpoint, &out.CloudStorageAPIEndpoint
		*out = new(string)
		**out = **in
	}
	if in.CloudStorageAPIEndpointPort != nil {
		in, out := &in.CloudStorageAPIEndpointPort, &out.CloudStorageAPIEndpointPort
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageBucket != nil {
		in, out := &in.CloudStorageBucket, &out.CloudStorageBucket
		*out = new(string)
		**out = **in
	}
	if in.CloudStorageAzureContainer != nil {
		in, out := &in.CloudStorageAzureContainer, &out.CloudStorageAzureContainer
		*out = new(string)
		**out = **in
	}
	if in.CloudStorageAzureManagedIdentityID != nil {
		in, out := &in.CloudStorageAzureManagedIdentityID, &out.CloudStorageAzureManagedIdentityID
		*out = new(string)
		**out = **in
	}
	if in.CloudStorageAzureStorageAccount != nil {
		in, out := &in.CloudStorageAzureStorageAccount, &out.CloudStorageAzureStorageAccount
		*out = new(string)
		**out = **in
	}
	if in.CloudStorageAzureSharedKey != nil {
		in, out := &in.CloudStorageAzureSharedKey, &out.CloudStorageAzureSharedKey
		*out = new(string)
		**out = **in
	}
	if in.CloudStorageAzureADLSEndpoint != nil {
		in, out := &in.CloudStorageAzureADLSEndpoint, &out.CloudStorageAzureADLSEndpoint
		*out = new(string)
		**out = **in
	}
	if in.CloudStorageAzureADLSPort != nil {
		in, out := &in.CloudStorageAzureADLSPort, &out.CloudStorageAzureADLSPort
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageCacheCheckInterval != nil {
		in, out := &in.CloudStorageCacheCheckInterval, &out.CloudStorageCacheCheckInterval
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageCacheDirectory != nil {
		in, out := &in.CloudStorageCacheDirectory, &out.CloudStorageCacheDirectory
		*out = new(string)
		**out = **in
	}
	if in.CloudStorageCacheSize != nil {
		in, out := &in.CloudStorageCacheSize, &out.CloudStorageCacheSize
		*out = new(string)
		**out = **in
	}
	if in.CloudStorageCredentialsSource != nil {
		in, out := &in.CloudStorageCredentialsSource, &out.CloudStorageCredentialsSource
		*out = new(string)
		**out = **in
	}
	if in.CloudStorageDisableTLS != nil {
		in, out := &in.CloudStorageDisableTLS, &out.CloudStorageDisableTLS
		*out = new(bool)
		**out = **in
	}
	if in.CloudStorageEnableRemoteRead != nil {
		in, out := &in.CloudStorageEnableRemoteRead, &out.CloudStorageEnableRemoteRead
		*out = new(bool)
		**out = **in
	}
	if in.CloudStorageEnableRemoteWrite != nil {
		in, out := &in.CloudStorageEnableRemoteWrite, &out.CloudStorageEnableRemoteWrite
		*out = new(bool)
		**out = **in
	}
	if in.CloudStorageInitialBackoffMs != nil {
		in, out := &in.CloudStorageInitialBackoffMs, &out.CloudStorageInitialBackoffMs
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageManifestUploadTimeoutMs != nil {
		in, out := &in.CloudStorageManifestUploadTimeoutMs, &out.CloudStorageManifestUploadTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageMaxConnectionIdleTimeMs != nil {
		in, out := &in.CloudStorageMaxConnectionIdleTimeMs, &out.CloudStorageMaxConnectionIdleTimeMs
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageMaxConnections != nil {
		in, out := &in.CloudStorageMaxConnections, &out.CloudStorageMaxConnections
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageReconciliationIntervalMs != nil {
		in, out := &in.CloudStorageReconciliationIntervalMs, &out.CloudStorageReconciliationIntervalMs
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageRegion != nil {
		in, out := &in.CloudStorageRegion, &out.CloudStorageRegion
		*out = new(string)
		**out = **in
	}
	if in.CloudStorageSegmentMaxUploadIntervalSec != nil {
		in, out := &in.CloudStorageSegmentMaxUploadIntervalSec, &out.CloudStorageSegmentMaxUploadIntervalSec
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageSegmentUploadTimeoutMs != nil {
		in, out := &in.CloudStorageSegmentUploadTimeoutMs, &out.CloudStorageSegmentUploadTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageTrustFile != nil {
		in, out := &in.CloudStorageTrustFile, &out.CloudStorageTrustFile
		*out = new(string)
		**out = **in
	}
	if in.CloudStorageUploadCtrlDCoeff != nil {
		in, out := &in.CloudStorageUploadCtrlDCoeff, &out.CloudStorageUploadCtrlDCoeff
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageUploadCtrlMaxShares != nil {
		in, out := &in.CloudStorageUploadCtrlMaxShares, &out.CloudStorageUploadCtrlMaxShares
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageUploadCtrlMinShares != nil {
		in, out := &in.CloudStorageUploadCtrlMinShares, &out.CloudStorageUploadCtrlMinShares
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageUploadCtrlPCoeff != nil {
		in, out := &in.CloudStorageUploadCtrlPCoeff, &out.CloudStorageUploadCtrlPCoeff
		*out = new(int)
		**out = **in
	}
	if in.CloudStorageUploadCtrlUpdateIntervalMs != nil {
		in, out := &in.CloudStorageUploadCtrlUpdateIntervalMs, &out.CloudStorageUploadCtrlUpdateIntervalMs
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TieredConfig.
func (in *TieredConfig) DeepCopy() *TieredConfig {
	if in == nil {
		return nil
	}
	out := new(TieredConfig)
	in.DeepCopyInto(out)
	return out
}
