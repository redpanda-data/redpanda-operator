// Copyright 2022 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/redpanda-data/redpanda-operator/src/go/k8s/api/redpanda/v1alpha2"
)

// ACLRuleApplyConfiguration represents an declarative configuration of the ACLRule type for use
// with apply.
type ACLRuleApplyConfiguration struct {
	Type       *v1alpha2.ACLType                  `json:"type,omitempty"`
	Resource   *ACLResourceSpecApplyConfiguration `json:"resource,omitempty"`
	Host       *string                            `json:"host,omitempty"`
	Operations []v1alpha2.ACLOperation            `json:"operations,omitempty"`
}

// ACLRuleApplyConfiguration constructs an declarative configuration of the ACLRule type for use with
// apply.
func ACLRule() *ACLRuleApplyConfiguration {
	return &ACLRuleApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ACLRuleApplyConfiguration) WithType(value v1alpha2.ACLType) *ACLRuleApplyConfiguration {
	b.Type = &value
	return b
}

// WithResource sets the Resource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resource field is set to the value of the last call.
func (b *ACLRuleApplyConfiguration) WithResource(value *ACLResourceSpecApplyConfiguration) *ACLRuleApplyConfiguration {
	b.Resource = value
	return b
}

// WithHost sets the Host field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Host field is set to the value of the last call.
func (b *ACLRuleApplyConfiguration) WithHost(value string) *ACLRuleApplyConfiguration {
	b.Host = &value
	return b
}

// WithOperations adds the given value to the Operations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Operations field.
func (b *ACLRuleApplyConfiguration) WithOperations(values ...v1alpha2.ACLOperation) *ACLRuleApplyConfiguration {
	for i := range values {
		b.Operations = append(b.Operations, values[i])
	}
	return b
}
