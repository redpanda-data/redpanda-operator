// Copyright 2022 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// KafkaSASLAWSMskIamApplyConfiguration represents an declarative configuration of the KafkaSASLAWSMskIam type for use
// with apply.
type KafkaSASLAWSMskIamApplyConfiguration struct {
	AccessKey    *string                         `json:"accessKey,omitempty"`
	SecretKey    *SecretKeyRefApplyConfiguration `json:"secretKeySecretRef,omitempty"`
	SessionToken *SecretKeyRefApplyConfiguration `json:"sessionTokenSecretRef,omitempty"`
	UserAgent    *string                         `json:"userAgent,omitempty"`
}

// KafkaSASLAWSMskIamApplyConfiguration constructs an declarative configuration of the KafkaSASLAWSMskIam type for use with
// apply.
func KafkaSASLAWSMskIam() *KafkaSASLAWSMskIamApplyConfiguration {
	return &KafkaSASLAWSMskIamApplyConfiguration{}
}

// WithAccessKey sets the AccessKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AccessKey field is set to the value of the last call.
func (b *KafkaSASLAWSMskIamApplyConfiguration) WithAccessKey(value string) *KafkaSASLAWSMskIamApplyConfiguration {
	b.AccessKey = &value
	return b
}

// WithSecretKey sets the SecretKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretKey field is set to the value of the last call.
func (b *KafkaSASLAWSMskIamApplyConfiguration) WithSecretKey(value *SecretKeyRefApplyConfiguration) *KafkaSASLAWSMskIamApplyConfiguration {
	b.SecretKey = value
	return b
}

// WithSessionToken sets the SessionToken field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SessionToken field is set to the value of the last call.
func (b *KafkaSASLAWSMskIamApplyConfiguration) WithSessionToken(value *SecretKeyRefApplyConfiguration) *KafkaSASLAWSMskIamApplyConfiguration {
	b.SessionToken = value
	return b
}

// WithUserAgent sets the UserAgent field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UserAgent field is set to the value of the last call.
func (b *KafkaSASLAWSMskIamApplyConfiguration) WithUserAgent(value string) *KafkaSASLAWSMskIamApplyConfiguration {
	b.UserAgent = &value
	return b
}
