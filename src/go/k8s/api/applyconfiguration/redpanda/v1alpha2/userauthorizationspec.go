// Copyright 2022 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/redpanda-data/redpanda-operator/src/go/k8s/api/redpanda/v1alpha2"
)

// UserAuthorizationSpecApplyConfiguration represents an declarative configuration of the UserAuthorizationSpec type for use
// with apply.
type UserAuthorizationSpecApplyConfiguration struct {
	Type *v1alpha2.AuthorizationType `json:"type,omitempty"`
	ACLs []ACLRuleApplyConfiguration `json:"acls,omitempty"`
}

// UserAuthorizationSpecApplyConfiguration constructs an declarative configuration of the UserAuthorizationSpec type for use with
// apply.
func UserAuthorizationSpec() *UserAuthorizationSpecApplyConfiguration {
	return &UserAuthorizationSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *UserAuthorizationSpecApplyConfiguration) WithType(value v1alpha2.AuthorizationType) *UserAuthorizationSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithACLs adds the given value to the ACLs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ACLs field.
func (b *UserAuthorizationSpecApplyConfiguration) WithACLs(values ...*ACLRuleApplyConfiguration) *UserAuthorizationSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithACLs")
		}
		b.ACLs = append(b.ACLs, *values[i])
	}
	return b
}
