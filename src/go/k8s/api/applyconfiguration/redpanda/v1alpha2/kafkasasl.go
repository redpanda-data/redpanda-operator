// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	redpandav1alpha2 "github.com/redpanda-data/redpanda-operator/src/go/k8s/api/redpanda/v1alpha2"
)

// KafkaSASLApplyConfiguration represents an declarative configuration of the KafkaSASL type for use
// with apply.
type KafkaSASLApplyConfiguration struct {
	Username     *string                                 `json:"username,omitempty"`
	Password     *SecretKeyRefApplyConfiguration         `json:"passwordSecretRef,omitempty"`
	Mechanism    *redpandav1alpha2.SASLMechanism         `json:"mechanism,omitempty"`
	OAUth        *KafkaSASLOAuthBearerApplyConfiguration `json:"oauth,omitempty"`
	GSSAPIConfig *KafkaSASLGSSAPIApplyConfiguration      `json:"gssapi,omitempty"`
	AWSMskIam    *KafkaSASLAWSMskIamApplyConfiguration   `json:"awsMskIam,omitempty"`
}

// KafkaSASLApplyConfiguration constructs an declarative configuration of the KafkaSASL type for use with
// apply.
func KafkaSASL() *KafkaSASLApplyConfiguration {
	return &KafkaSASLApplyConfiguration{}
}

// WithUsername sets the Username field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Username field is set to the value of the last call.
func (b *KafkaSASLApplyConfiguration) WithUsername(value string) *KafkaSASLApplyConfiguration {
	b.Username = &value
	return b
}

// WithPassword sets the Password field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Password field is set to the value of the last call.
func (b *KafkaSASLApplyConfiguration) WithPassword(value *SecretKeyRefApplyConfiguration) *KafkaSASLApplyConfiguration {
	b.Password = value
	return b
}

// WithMechanism sets the Mechanism field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mechanism field is set to the value of the last call.
func (b *KafkaSASLApplyConfiguration) WithMechanism(value redpandav1alpha2.SASLMechanism) *KafkaSASLApplyConfiguration {
	b.Mechanism = &value
	return b
}

// WithOAUth sets the OAUth field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OAUth field is set to the value of the last call.
func (b *KafkaSASLApplyConfiguration) WithOAUth(value *KafkaSASLOAuthBearerApplyConfiguration) *KafkaSASLApplyConfiguration {
	b.OAUth = value
	return b
}

// WithGSSAPIConfig sets the GSSAPIConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GSSAPIConfig field is set to the value of the last call.
func (b *KafkaSASLApplyConfiguration) WithGSSAPIConfig(value *KafkaSASLGSSAPIApplyConfiguration) *KafkaSASLApplyConfiguration {
	b.GSSAPIConfig = value
	return b
}

// WithAWSMskIam sets the AWSMskIam field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AWSMskIam field is set to the value of the last call.
func (b *KafkaSASLApplyConfiguration) WithAWSMskIam(value *KafkaSASLAWSMskIamApplyConfiguration) *KafkaSASLApplyConfiguration {
	b.AWSMskIam = value
	return b
}
