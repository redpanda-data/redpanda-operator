version: '3'

tasks:

  generate:
    dir: 'operator'
    aliases:
    - generate-controller-code
    - generate-manifests
    cmds:
      - task: generate:crd-docs
      - |
        controller-gen \
          object:headerFile="../licenses/boilerplate.go.txt" \
          paths='./...' \
          crd \
          webhook \
          rbac:roleName=manager-role \
          output:crd:artifacts:config=config/crd/bases \
          output:rbac:artifacts:config=config/rbac/bases/operator
      - |
        controller-gen \
          paths='./internal/controller/redpanda/...' \
          rbac:roleName=v2-manager-role \
          output:rbac:artifacts:config=config/rbac/v2-manager-role
      # controller-gen won't output to multiple directories and we need a copy
      # of resources for tests, so cp it is.
      - cp ./config/rbac/v2-manager-role/*.yaml ./internal/controller/redpanda/
      - |
        controller-gen \
          paths='./internal/decommissioning/...' \
          rbac:roleName=decommissioner-role \
          output:rbac:artifacts:config=config/rbac/decommissioner-role
      # controller-gen won't output to multiple directories and we need a copy
      # of resources for tests, so cp it is.
      - cp ./config/rbac/decommissioner-role/*.yaml ./internal/decommissioning/
      - |
        controller-gen \
          paths='./internal/controller/vectorized/...' \
          rbac:roleName=v1-manager-role \
          output:rbac:artifacts:config=config/rbac/v1-manager-role
      - |
        controller-gen \
          paths='./cmd/run/...' \
          rbac:roleName=leader-election-role \
          output:rbac:artifacts:config=config/rbac/leader-election-role
      - |
        applyconfiguration-gen \
        --go-header-file "../licenses/boilerplate.go.txt" \
        --output-dir "api/applyconfiguration" \
        --output-pkg "github.com/redpanda-data/redpanda-operator/operator/api/applyconfiguration" \
        ./api/redpanda/v1alpha2
      - find ./api/applyconfiguration/redpanda/v1alpha2 -type f -exec sed -i'' 's/"redpanda\/v1/"cluster.redpanda.com\/v1/g' {} \;
      - rm -rf api/applyconfiguration/utils.go api/applyconfiguration/internal

  generate:crd-docs:
    desc: Generates an example ascii doc from our crd-ref-docs configuration.
    dir: 'operator'
    cmds:
    - |
      crd-ref-docs \
      --config crd-ref-docs-config.yaml \
      --source-path ./api/redpanda/v1alpha2/ \
      --output-path ./api/redpanda/v1alpha2/testdata/crd-docs.adoc

  build-operator-images:
    deps:
      - :goreleaser:build-operator-binaries
    cmds:
      # TODO(chrisseto): Get multiplatform builds working.
      - docker buildx build
          --platform linux/{{ARCH}}
          --file operator/Dockerfile
          --target=manager
          --tag localhost/redpanda-operator:dev
          --load
          ./dist

  fetch-latest-redpanda:
    desc: fetch the latest redpanda release and tag it localhost/redpanda:dev
    summary: |
      pulls down the latest redpanda nightly build and tag it localhost/repdanda:dev
      to allow us to skip building redpanda with every CI run.
    dir: operator
    vars:
      CONSTRAINT: '{{.CONSTRAINT | default ""}}'
      REPO: '{{.REPO | default "docker.redpanda.com/redpandadata/redpanda"}}'
    cmds:
      - |
        TAG=$(docker-tag-list -c "{{.CONSTRAINT}}" --latest -r "{{.REPO}}" | sed 's/-a..64$//')
        docker pull "{{.REPO}}":"${TAG}"
        docker tag "{{.REPO}}":"${TAG}" localhost/redpanda:dev

  run-kuttl-tests:
    desc: run kuttl tests
    summary: |
      Executes end-to-end kuttl tests. It expects a KUTTL_CONFIG_FILE variable
      that points to the config file passed to kuttl. In addition, Task's
      CLI_ARGS is also passed to `kuttl`, so arbitrary flags can be given too.

      Currently, e2e redpanda operator tests assumes a docker image for redpanda
      exists locally at the time this task runs (localhost/redpanda:dev image).
      This image can be downloaded by invoking the fetch-latest-redpanda task.

      This task doesn't fail if kuttl fails. Instead, it writes the exit code of
      kuttl to the kuttl-exit-code file and expects the caller to check the
      content of this file in order to determine if kuttl failed.

      When kuttl fails, the artifacts dir specified in the `artifactsDir` kuttl
      configuration option is compressed. The name of the tarball is the same as
      basename of the `artifactsDir` variable, with the `.tar.gz` suffix.
    dir: 'operator'
    vars:
      KUTTL_CONFIG_FILE: '{{default "kuttl-test.yaml" .KUTTL_CONFIG_FILE}}'
      KUTTL_ARTIFACTS_DIR:
        sh: |
          cat {{.KUTTL_CONFIG_FILE}} | grep artifactsDir | awk '{print $2}'
    deps:
      - task: fetch-latest-redpanda
      - task: build-operator-images
    cmds:
      - mkdir -p {{.KUTTL_ARTIFACTS_DIR}}
      - kuttl test --config "{{.KUTTL_CONFIG_FILE}}" {{.CLI_ARGS}}

  build-and-push-operator-container-image:
    vars:
      OPERATOR_REPO:
        sh: |
          repo="redpanda-operator"
          if {{regexMatch `^v0\.0\.0-\d{8}git[a-f0-9]{7}$` .TAG_NAME}}; then
            repo="redpanda-operator-nightly"
          fi
          echo $repo
    cmds:
      - cmd: docker login --username {{.DOCKERHUB_USER}} --password {{.DOCKERHUB_TOKEN}}
        silent: true
      - 'echo "~~~ :docker: Build & Push operator container"'
      - docker buildx build
        --provenance false --sbom false --platform linux/amd64
        --file operator/Dockerfile
        --target manager
        --tag docker.io/redpandadata/{{.OPERATOR_REPO}}:{{.TAG_NAME}}-amd64
        --push
        ./dist
      - docker buildx build
        --provenance false --sbom false --platform linux/arm64
        --file operator/Dockerfile
        --target manager
        --tag docker.io/redpandadata/{{.OPERATOR_REPO}}:{{.TAG_NAME}}-arm64
        --push
        ./dist
      - docker manifest create docker.io/redpandadata/{{.OPERATOR_REPO}}:{{.TAG_NAME}}
        --amend docker.io/redpandadata/{{.OPERATOR_REPO}}:{{.TAG_NAME}}-amd64
        --amend docker.io/redpandadata/{{.OPERATOR_REPO}}:{{.TAG_NAME}}-arm64
      - docker manifest push docker.io/redpandadata/{{.OPERATOR_REPO}}:{{.TAG_NAME}}
      - cmd: docker logout
    preconditions:
      - test -n "$DOCKERHUB_USER"
      - test -n "$DOCKERHUB_TOKEN"

  build-tag-and-push-images:
    desc: builds, tags and pushes images to dockerhub
    deps:
      - :dev:create-buildx-builder
      - :goreleaser:build-operator-binaries
    vars:
      IS_INTERNAL:
        sh: |
          if {{regexMatch `^v0\.0\.0-\d{8}git[a-f0-9]{7}$` .TAG_NAME}}; then
            echo "true"
          else
            echo "false"
          fi
      CLOUDSMITH_REPO:
        sh: |
          repo="docker.cloudsmith.io/redpanda/cloudv2/redpanda"
          if {{regexMatch `^v0\.0\.0-\d{8}git[a-f0-9]{7}$` .TAG_NAME}}; then
            if [[ '{{.BRANCH_NAME}}' != 'dev' ]]; then
              repo="docker.cloudsmith.io/redpanda/redpanda-internal/redpanda"
            fi
          fi
          echo $repo
      OPERATOR_REPO:
        sh: |
          repo="redpanda-operator"
          if {{regexMatch `^v0\.0\.0-\d{8}git[a-f0-9]{7}$` .TAG_NAME}}; then
            if [[ '{{.BRANCH_NAME}}' != 'dev' ]]; then
              repo="redpanda-operator-internal"
            fi
          fi
          echo $repo
    cmds:
      - |
        if [[ "{{.IS_INTERNAL}}" == "false" && "{{.IS_OPERATOR}}" == "false" ]]; then
          echo "operator requires 'operator/' prefix in tags"
          exit 1
        fi
      - cmd: docker login --username {{.DOCKERHUB_USER}} --password {{.DOCKERHUB_TOKEN}}
        silent: true
      - docker buildx build
          --platform linux/arm64,linux/amd64
          --file operator/Dockerfile
          --target manager
          --tag docker.io/vectorized/{{.OPERATOR_REPO}}:{{.TAG_NAME}}
          --tag docker.io/redpandadata/{{.OPERATOR_REPO}}:{{.TAG_NAME}}
          --push
          ./dist
      # re-enable as part of https://github.com/redpanda-data/cloudv2/issues/3267
      # - cmd: docker login docker.cloudsmith.io --username {{.CLOUDSMITH_USERNAME}} --password {{.CLOUDSMITH_API_KEY}}
      #   silent: true
      # - docker buildx build
      #     --platform linux/arm64,linux/amd64
      #     --file operator/Dockerfile
      #     --target manager
      #     --tag {{.CLOUDSMITH_REPO}}:{{.TAG_NAME}}
      #     --push
      #     ./dist
    preconditions:
      - test -n "$DOCKERHUB_USER"
      - test -n "$DOCKERHUB_TOKEN"
      - test -n "$CLOUDSMITH_USERNAME"
      - test -n "$CLOUDSMITH_API_KEY"

  package-and-publish-operator-chart:
    vars:
      TMP_PATH:
        sh: mktemp --directory --tmpdir "helm-package-XXXXXXXXXX"
    cmds:
      - defer: 'rm -r {{.TMP_PATH}}'
      - defer: 'helm registry logout registry-1.docker.io'
      - helm registry login registry-1.docker.io -u {{.DOCKERHUB_USER}} --password {{.DOCKERHUB_TOKEN}}
      - cp -r charts/operator/ {{.TMP_PATH}}
      # The Chart.yaml name needs to match with docker hub OCI registry, so that helm push correctly
      # finds OCI registry.
      # Reference
      # https://hub.docker.com/r/redpandadata/redpanda-operator-nightly
      - yq -i '.name = "redpanda-operator-nightly"' {{.TMP_PATH}}/operator/Chart.yaml
      # The version has suffix -helm-chart to overcome docker hub limitation of the oci artifact types
      # Reference
      # https://forums.docker.com/t/tag-overlap-in-oci-artifacts/131453
      # For usage of operator artifact please go to specific reference like the one below
      # https://hub.docker.com/layers/redpandadata/redpanda-operator-nightly/v0.0.0-20250104git4a5a076-helm-chart/images/sha256-ffaea8752b6bd00a26589a168830a87d498106e470f11af0f08267bc13fbd078
      - helm package {{.TMP_PATH}}/operator --version "{{.TAG_NAME}}-helm-chart" --destination {{.TMP_PATH}} --dependency-update
      - helm push `ls {{.TMP_PATH}}/redpanda-operator-nightly*.tgz` oci://registry-1.docker.io/redpandadata
    preconditions:
      - test -n "$DOCKERHUB_USER"
      - test -n "$DOCKERHUB_TOKEN"
