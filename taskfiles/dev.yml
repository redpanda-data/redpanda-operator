version: '3'

# dev.yml contains all tasks that install binary dependencies (and other odds and ends).
# To install a dependency:
# - Add {{BINARY_NAME}}_VERSION to the vars list
# - Create a install-{{BINARY_NAME}} task
# - If you need a working directory, add a task local var set to `mktemp -d`.
#   Make sure to clean it up afterwards! For safety, prefer to delete files by
#   name and then clean up the directory with rmdir to avoid `rm -rf` disasters.
# - Install/copy the resulting binary to {{.BIN_DIR}}. Doing so ensures that
#   binary will be available in $PATH.
# - Make sure to support amd64, aarch64, linux, and darwin targets.
# - Cache dependencies with `status`. If any installation is acceptable, use
#   command -v BINARY_NAME and grep/sed to verify version. Otherwise, test -x
#   {{.BIN_DIR}}/BINARY_NAME and grep/sed to verify the version.

vars:
  TASK_VERSION: '3.19.1'
  GOLANG_VERSION: '1.21.3'
  GOLANG_INSTALL_DIR: '{{.BUILD_ROOT}}/go/{{.GOLANG_VERSION}}'
  KUBECTL_VERSION: '1.28.2'
  GOLANGCI_LINT_VERSION: '1.55.2'
  HELM_VERSION: '3.6.3'
  KIND_VERSION: '0.20.0'
  GOFUMPT_VERSION: 'v0.5.0'
  K8S_CONTROLLER_GEN_VERSION: 'v0.13.0'
  K8S_CONTROLLER_RUNTIME_SETUP_ENVTEST_VERSION: 'v0.7.0'
  KUSTOMIZE_VERSION: 'v5.1.1'
  YQ_VERSION: '4.35.2'
  KUTTL_VERSION: '0.15.0'
  GORELEASER_VERSION: '1.20.0'
  QUILL_VERSION: '0.4.1'

tasks:
  install-task:
    cmds:
      - "{{.SRC_DIR}}/ci/scripts/install-task.sh"
    status:
      - test -f {{.BIN_DIR}}/task
      - "[[ $({{.BIN_DIR}}/task --version | grep -o {{.TASK_VERSION}}) == {{.TASK_VERSION}} ]]"

  install-go:
    desc: Install the golang toolchain
    vars:
      GOLANG_URL: 'https://vectorized-public.s3.us-west-2.amazonaws.com/dependencies/go{{.GOLANG_VERSION}}.{{OS}}-{{ARCH}}.tar.gz'
    cmds:
      # Go's installation is a bit special compared to everything else here. Go
      # comes with 2 binaries and the entire standard library. Therefore we
      # can't just dump it into BIN_DIR. It get's extracted into it's own
      # installation directory and symlinked into BIN_DIR as task doesn't allow
      # any form of $PATH manipulation.
      - mkdir -p '{{.GOLANG_INSTALL_DIR}}'
      - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 --retry-all-errors -o '{{.GOLANG_INSTALL_DIR}}/go{{.GOLANG_VERSION}}.{{OS}}-{{ARCH}}.tar.gz' '{{.GOLANG_URL}}'
      - tar -xz -C '{{.GOLANG_INSTALL_DIR}}' -f '{{.GOLANG_INSTALL_DIR}}/go{{.GOLANG_VERSION}}.{{OS}}-{{ARCH}}.tar.gz' --strip 1
      - rm '{{.GOLANG_INSTALL_DIR}}/go{{.GOLANG_VERSION}}.{{OS}}-{{ARCH}}.tar.gz'
      - ln -sf '{{.GOLANG_INSTALL_DIR}}/bin/go' '{{.BIN_DIR}}/go'
      - ln -sf '{{.GOLANG_INSTALL_DIR}}/bin/gofmt' '{{.BIN_DIR}}/gofmt'
    status:
      # Don't install go if it's already present in the environment and if it's
      # at least in line with the patch version (IE 1.21.x). This lets
      # developers and CI agents manage their own go installation.
      - command -v go
      - "[[ 'go{{.GOLANG_VERSION}}' == $(go version | grep -E -o 'go[0-9]+\\.[0-9]+')* ]]"

  install-gofumpt:
    desc: install gofumpt go formater
    summary: |
      Install gofumpt go formater tool in the build directory ($BUILD_ROOT/bin/go),
      only if it does not exist on the host already. Checking whether is
      available on the host is done so that this task can also run in
      containerized environments.
    deps:
      - task: :dev:install-go
    cmds:
      - GOBIN={{.BIN_DIR}} go install mvdan.cc/gofumpt@{{.GOFUMPT_VERSION}}
    status:
      # Don't install gofumpt if it's already present in the environment.
      - command -v gofumpt
      # And if it's the same version as the one we want.
      - "[[ $(gofumpt -version | grep -Eo 'v[^ ]+') == '{{.GOFUMPT_VERSION}}' ]]"

  install-kustomize:
    vars:
      KUSTOMIZE_URL: 'https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/{{.KUSTOMIZE_VERSION}}/kustomize_{{.KUSTOMIZE_VERSION}}_{{OS}}_{{ARCH}}.tar.gz'
    cmds:
      - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 --retry-all-errors '{{.KUSTOMIZE_URL}}' | tar -xz -C '{{.BIN_DIR}}'
    status:
      - command -v kustomize
      - "[[ $(kustomize version) == '{{.KUSTOMIZE_VERSION}}' ]]"

  install-kubectl:
    desc: install kubectl
    vars:
      KUBECTL_URL_DEFAULT: 'https://storage.googleapis.com/kubernetes-release/release/v{{.KUBECTL_VERSION}}/bin/{{OS}}/{{ARCH}}/kubectl'
      KUBECTL_URL: '{{default .KUBECTL_URL_DEFAULT .KUBECTL_URL}}'
    cmds:
      - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 '{{.KUBECTL_URL}}' --retry-all-errors -o '{{.BIN_DIR}}/kubectl'
      - chmod +x '{{.BIN_DIR}}/kubectl'
    status:
      # Don't install kubectl if it's already present and matches the major and minor version of KUBECTL_VERSION.
      - command -v kubectl
      - "[[ '{{.KUBECTL_VERSION}}' == $(kubectl version | sed -nr 's/Client Version: v([0-9]\\.[0-9]+).*/\\1/p')*]]"

  install-kind:
    desc: install kind
    vars:
      KIND_URL_DEFAULT: 'https://kind.sigs.k8s.io/dl/v{{.KIND_VERSION}}/kind-{{OS}}-{{ARCH}}'
      KIND_URL: '{{default .KIND_URL_DEFAULT .KIND_URL}}'
    cmds:
      - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 '{{.KIND_URL}}' --retry-all-errors -o '{{.BIN_DIR}}/kind'
      - chmod +x '{{.BIN_DIR}}/kind'
    status:
      - test -f '{{.BIN_DIR}}/kind'

  install-golangci-lint:
    desc: install golangci-lint
    vars:
      GOLANGCI_LINT_URL_DEFAULT: 'https://github.com/golangci/golangci-lint/releases/download/v{{.GOLANGCI_LINT_VERSION}}/golangci-lint-{{.GOLANGCI_LINT_VERSION}}-{{OS}}-{{ARCH}}.tar.gz'
      GOLANGCI_LINT_URL: '{{default .GOLANGCI_LINT_URL_DEFAULT .GOLANGCI_LINT_URL}}'
      TMPDIR:
        sh: mktemp -d
    cmds:
      - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 --retry-all-errors -o '{{.TMPDIR}}/golangci-lint-{{.GOLANGCI_LINT_VERSION}}-{{OS}}-{{ARCH}}.tar.gz' '{{.GOLANGCI_LINT_URL}}'
      - tar -xz -C '{{.BIN_DIR}}' -f '{{.TMPDIR}}/golangci-lint-{{.GOLANGCI_LINT_VERSION}}-{{OS}}-{{ARCH}}.tar.gz' --strip 1 --wildcards '*/golangci-lint'
      - rm '{{.TMPDIR}}/golangci-lint-{{.GOLANGCI_LINT_VERSION}}-{{OS}}-{{ARCH}}.tar.gz'
      - rmdir {{.TMPDIR}}
    status:
      - test -f '{{.BIN_DIR}}/golangci-lint'

  install-docker-tag-list:
    desc: install docker-tag-list
    deps:
      - install-go
    cmds:
      - GOBIN='{{.BIN_DIR}}' go install github.com/joejulian/docker-tag-list@latest
    status:
      - test -f '{{.BIN_DIR}}/docker-tag-list'

  install-goreleaser:
    desc: install goreleaser
    deps:
      - install-go
    cmds:
      - GOBIN='{{.BIN_DIR}}' go install "github.com/goreleaser/goreleaser@v{{.GORELEASER_VERSION}}"
    status:
      - test -f {{.BIN_DIR}}/goreleaser
      - |
        [[ $(goreleaser --version | grep -o {{.GORELEASER_VERSION}}) == {{.GORELEASER_VERSION}} ]]

  install-k8s-controller-gen:
    desc: install k8s-controller-gen
    deps:
      - install-go
    cmds:
      - GOBIN='{{.BIN_DIR}}' go install sigs.k8s.io/controller-tools/cmd/controller-gen@{{.K8S_CONTROLLER_GEN_VERSION}}
    status:
      - test -f '{{.BIN_DIR}}/controller-gen'

  start-podman-socket-service:
    desc: start podman.socket service
    vars:
      USE_PODMAN_DOCKER: '{{default "" .USE_PODMAN_DOCKER}}'
    cmds:
      - systemctl --user start podman.socket
      - "curl -H 'Content-Type: application/json' --unix-socket $XDG_RUNTIME_DIR/podman/podman.sock http://localhost/_ping | grep OK"
    status:
      - test -z {{.USE_PODMAN_DOCKER}}

  install-helm:
    desc: install helm
    vars:
      HELM_URL_DEFAULT: 'https://get.helm.sh/helm-v{{.HELM_VERSION}}-{{OS}}-{{ARCH}}.tar.gz'
      HELM_URL: '{{default .HELM_URL_DEFAULT .HELM_URL}}'
      TMPDIR:
        sh: mktemp -d
    cmds:
      - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 --retry-all-errors '{{.HELM_URL}}' -o '{{.TMPDIR}}/helm.tgz'
      - tar -xz -C '{{.BIN_DIR}}' --strip 1 -f '{{.TMPDIR}}/helm.tgz' '{{OS}}-{{ARCH}}/helm'
      - rm '{{.TMPDIR}}/helm.tgz'
      - rmdir '{{.TMPDIR}}'
    status:
      - test -f '{{.BIN_DIR}}/helm'

  install-yq:
    desc: install yq (YAML processor)
    vars:
      TMPDIR:
        sh: mktemp -d
      YQ_URL: 'https://github.com/mikefarah/yq/releases/download/v{{.YQ_VERSION}}/yq_{{OS}}_{{ARCH}}.tar.gz'
    cmds:
      - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 --retry-all-errors {{ .YQ_URL }} -o '{{.TMPDIR}}/yq.tar.gz'
      - tar -xz -C {{.TMPDIR}} --strip 1 -f '{{.TMPDIR}}/yq.tar.gz' './yq_{{OS}}_{{ARCH}}'
      - mv {{.TMPDIR}}/yq_{{OS}}_{{ARCH}} {{.BIN_DIR}}/yq
      - rm {{.TMPDIR}}/yq.tar.gz
      - rmdir {{.TMPDIR}}
    status:
      - test -f '{{.BIN_DIR}}/yq'

  install-kuttl:
    desc: install kuttl
    vars:
      KUTTL_URL: 'https://github.com/kudobuilder/kuttl/releases/download/v{{.KUTTL_VERSION}}/kubectl-kuttl_{{.KUTTL_VERSION}}_{{OS}}_{{if eq ARCH "amd64"}}x86_64{{else}}arm64{{end}}'
    cmds:
      - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 '{{.KUTTL_URL}}' -o '{{.BIN_DIR}}/kuttl'
      - chmod +x '{{.BIN_DIR}}/kuttl'
    status:
      - test -x '{{.BIN_DIR}}/kuttl'

  retry-task:
    vars:
      TASK_EXEC: '{{default "./task" .TASK_EXEC}}'
      RETRY_COUNT: '{{default 3 .RETRY_COUNT}}'
      SLEEP_INTERVAL: '{{default 3 .SLEEP_INTERVAL}}'
    cmds:
      - echo "will retry task {{.TASK}}"
      - |
        retry_times={{.RETRY_COUNT}}
        retry_index=0
        while ((retry_index < retry_times)); do
          set +e
          {{.TASK_EXEC}} {{.TASK}} {{.PARAMS}}
          cmd_code="$?"
          set -e
          if [[ $cmd_code == "0" ]]; then
            break
          fi
          let retry_index=retry_index+1
          echo "retrying task {{.TASK}}, attempt $retry_index, after sleep {{.SLEEP_INTERVAL}}"
          sleep {{.SLEEP_INTERVAL}}
        done
        if [[ $cmd_code != "0" ]]; then
          echo "retried '{{.TASK}}' task {{.RETRY_COUNT}} times and failed"
          exit $cmd_code
        fi
    preconditions:
      - test -n '{{.TASK}}'

  create-buildx-builder:
    cmds:
      - task: :dev:retry-task
        vars:
          TASK: dev:retry-create-buildx-builder
    status:
      - docker buildx ls | grep -q v-builder

  retry-create-buildx-builder:
    cmds:
      - docker buildx create --driver-opt env.BUILDKIT_STEP_LOG_MAX_SIZE=-1 --driver-opt env.BUILDKIT_STEP_LOG_MAX_SPEED=-1 --platform linux/amd64,linux/arm64 --name v-builder --use
      - '{{if eq ARCH "amd64"}} docker run --rm --privileged linuxkit/binfmt:v0.8 {{else}} echo "" {{end}}'

  install-k8s-controller-runtime-setup-envtest:
    vars:
      SETUP_ENVTEST_URL: 'https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/{{.K8S_CONTROLLER_RUNTIME_SETUP_ENVTEST_VERSION}}/hack/setup-envtest.sh'
    cmds:
      - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 '{{.SETUP_ENVTEST_URL}}' -o '{{.BIN_DIR}}/setup-envtest.sh'
      - chmod +x '{{.BIN_DIR}}/setup-envtest.sh'
    status:
      - test -f '{{.BIN_DIR}}/setup-envtest.sh'

  install-goreleaser:
    desc: install goreleaser
    deps:
      - install-go
    cmds:
      - GOBIN={{.BIN_DIR}} go install "github.com/goreleaser/goreleaser@v{{.GORELEASER_VERSION}}"
    status:
      - test -f {{.BIN_DIR}}/goreleaser
      - |
        [[ $(goreleaser --version | grep -o {{.GORELEASER_VERSION}}) == {{.GORELEASER_VERSION}} ]]

  install-quill:
    desc: install quill
    cmds:
      - |
        curl -sSfL \
          https://raw.githubusercontent.com/anchore/quill/main/install.sh \
          | sh -s -- -b "{{.BIN_DIR}}" "v{{.QUILL_VERSION}}"
    status:
      - test -f {{.BIN_DIR}}/quill
      - "[[ $(quill --version | grep -o {{.QUILL_VERSION}}) == {{.QUILL_VERSION}} ]]"
