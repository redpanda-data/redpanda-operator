# Default values for console.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  registry: docker.redpanda.com
  repository: vectorized/console
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podLabels: {}

podSecurityContext:
  runAsUser: 99
  fsGroup: 99

securityContext:
  runAsNonRoot: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080
  # this will override the value in console.config.server.listenPort if not nil
  targetPort:
  annotations: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

console:
  # Config.yaml is required for Console
  # See reference config: https://docs.redpanda.com/docs/reference/console/config/
  config: {}
  # roles:
  # roleBindings:

# Additional environment variables for the Console Deployment
extraEnv: []
  # - name: KAFKA_RACKID
  #   value: "1"

# Additional environment variables for Console mapped from Secret or ConfigMap
extraEnvFrom: []
# - secretRef:
#     name: kowl-config-secret

# Add additional volumes, e. g. for tls keys
extraVolumes: []
# - name: kafka-certs
#   secret:
#     secretName: kafka-certs
# - name: config
#   configMap:
#     name: console-config

# Add additional volumes mounts, e. g. for tls keys
extraVolumeMounts: []
# - name: kafka-certs # Must match the volume name
#   mountPath: /etc/kafka/certs
#   readOnly: true

# Add additional containers, e. g. for oauth2-proxy
extraContainers: []

# SecretMounts is an abstraction to make a secret available in the container's filesystem.
# Under the hood it creates a volume + volume mount for the Console container.
secretMounts: []
#  - name: kafka-certs
#    secretName: kafka-certs
#    path: /etc/console/certs
#    defaultMode: 0755

# Secret can be used to create a new Kubernetes secret for all sensitive config inputs.
# Each provided secret will be mounted automatically and thus made available to the Console
# pod.
# If you want to use one or more existing secrets you can use "extraEnvFrom" to mount env
# variables from string and secretMounts to mount files such as certificates from secrets.
secret:
  create: true

  # Secret values in case you want the chart to create a secret. All certificates will be mounted
  # as a file and the path to that file will be configured via environment variables as well, so
  # that Console will automatically pick them up.
  # Kafka secrets
  kafka: {}
    # saslPassword:
    # awsMskIamSecretKey:
    # tlsCa:
    # tlsCert:
    # tlsKey:
    # tlsPassphrase:
    # schemaRegistryPassword:
    # schemaRegistryTlsCa:
    # schemaRegistryTlsCert:
    # schemaRegistryTlsKey:
    # protobufGitBasicAuthPassword
  # Enterprise version secrets
  # SSO secrets (enterprise version)
  login:
    google: {}
      # clientSecret:
      # groupsServiceAccount:
    github: {}
      # clientSecret:
      # personalAccessToken:
    okta: {}
      # clientSecret:
      # directoryApiToken:
    oidc: {}
      # clientSecret:

  enterprise: {}
    # license:

  redpanda:
    adminApi: {}
      # password:
      # tlsCa:
      # tlsCert:
      # tlsKey:

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  # Grant 10s time to test connectivity to upstream services (Kafka, Schema Registry, ...)
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3

configmap:
  create: true
deployment:
  create: true
