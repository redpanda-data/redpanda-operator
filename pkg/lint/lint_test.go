// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

package lint

import (
	"bytes"
	"fmt"
	"io/fs"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"slices"
	"strings"
	"sync"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"golang.org/x/mod/modfile"
	"golang.org/x/mod/module"
	"sigs.k8s.io/yaml"

	"github.com/redpanda-data/redpanda-operator/pkg/testutil"
)

var releaseBranch string

func init() {
	branch, err := fs.ReadFile(os.DirFS("../.."), "RELEASE_BRANCH")
	if err != nil {
		log.Println("WARNING: unable to determine target release branch")
		return
	}
	releaseBranch = strings.TrimSpace(string(branch))
}

type ChartYAML struct {
	Version     string            `json:"version"`
	AppVersion  string            `json:"appVersion"`
	Annotations map[string]string `json:"annotations"`
}

func TestToolVersions(t *testing.T) {
	golden := testutil.NewTxTar(t, "testdata/tool-versions.txtar")

	for _, cmd := range []string{
		"go version | cut -d ' ' -f 1-3", // cut removes os/arch
		"helm version",
		"k3d version",
		"kind version | cut -d ' ' -f 1-3", // cut removes os/arch
		"kubectl version --client=true",
		"kustomize version",
		"kuttl version | cut -d ' ' -f 1-7", // cut removes os/arch
		"task --version",
		"yq --version",
		"helm-docs -v",
		"ct version",
		"changie --version",
		"aws --version | cut -d ' ' -f 1-2", // cut removes os/arch
	} {
		out := sh(cmd)
		bin := strings.SplitN(cmd, " ", 2)[0]
		expect := fmt.Sprintf("# %s\n%s\n", cmd, out)
		golden.AssertGolden(t, testutil.Text, bin, []byte(expect))
	}
}

func sh(cmd string) string {
	out, err := exec.Command("sh", "-c", cmd).CombinedOutput()
	if err != nil {
		return fmt.Sprintf("ERROR: %s\n%s", err.Error(), out)
	}
	return string(out)
}

func TestChartYAMLVersions(t *testing.T) {
	chartYAMLs, err := fs.Glob(os.DirFS("../.."), "charts/*/Chart.yaml")
	require.NoError(t, err)

	for _, chartYAML := range chartYAMLs {
		changeLogPath := filepath.Join("../..", filepath.Dir(chartYAML), "CHANGELOG.md")

		chartBytes, err := os.ReadFile("../../" + chartYAML)
		require.NoError(t, err)

		changelog, err := os.ReadFile(changeLogPath)
		require.NoError(t, err)

		var chart map[string]any
		require.NoError(t, yaml.Unmarshal(chartBytes, &chart))

		chartName := chart["name"].(string)
		chartVersion := chart["version"].(string)

		// Headers generated by changie
		releaseHeader1 := fmt.Sprintf("## v%s - ", chartVersion)
		// Headers that were used prior to changie.
		releaseHeader2 := fmt.Sprintf("### [%s](", chartVersion)

		hasHeader := false
		hasHeader = hasHeader || bytes.Contains(changelog, []byte(releaseHeader1))
		hasHeader = hasHeader || bytes.Contains(changelog, []byte(releaseHeader2))

		// require.Contains is noisy with a large file. Fallback to
		// require.True for friendlier messages.
		assert.Truef(
			t,
			hasHeader,
			"%s's CHANGELOG.md is missing the release header for %s\nDid you forget to run changie batch?\nLooked for %q or %q",
			chartName,
			chartVersion,
			releaseHeader1,
			releaseHeader2,
		)
	}
}

// TestGoModLint parses most go.mod files in this repository and verifies that:
//   - go directive is equal to runtime version.
//   - No replace directives specifying paths are present (with exceptions).
//   - All dependencies on modules in this repo reference either a git tag or a
//     commit reachable from main or release/*.
func TestGoModLint(t *testing.T) {
	const modPrefix = "github.com/redpanda-data/redpanda-operator/"

	permittedReplaces := map[string][]string{
		// acceptance is exempt as it's just a runner for the harpoon module.
		// (harpoon could be moved into acceptance to resolve this).
		modPrefix + "acceptance": {modPrefix + "harpoon"},

		// gotohelm is exempt because it's a very loose wrapper around pkg to
		// expose ./pkg/gotohelm as CLI. (pkg/gotohelm could be re-homed to
		// resolve this).
		modPrefix + "gotohelm": {modPrefix + "pkg"},

		// gen is exempt from this rule because it's an internal static file
		// generator. The invocation `gen schema` uses reflection on Charts'
		// Value types that need to be up to date. (Generation could be moved
		// into their respective charts to resolve this).
		modPrefix + "charts/redpanda/v5": {modPrefix + "pkg"},
		modPrefix + "charts/connectors":  {modPrefix + "pkg"},
		modPrefix + "charts/console":     {modPrefix + "pkg"},
		modPrefix + "operator":           {modPrefix + "pkg"},
		modPrefix + "gen": {
			modPrefix + "charts/redpanda/v5",
			modPrefix + "operator",
			modPrefix + "pkg",
		},
	}

	// This could also be done with go work sync but go.work causes many other
	// pains :(.
	workspaceWideVersions := map[string]string{
		"github.com/Masterminds/semver/v3": "v3.3.1",
		"github.com/Masterminds/sprig/v3":  "v3.3.0",
		"helm.sh/helm/v3":                  "v3.14.4",
		"k8s.io/api":                       "v0.30.3",
		"k8s.io/apiextensions-apiserver":   "v0.30.3",
		"k8s.io/apimachinery":              "v0.30.3",
		"k8s.io/apiserver":                 "v0.30.3",
		"k8s.io/cli-runtime":               "v0.30.3",
		"k8s.io/client-go":                 "v0.30.3",
		"k8s.io/component-base":            "v0.30.3",
		"k8s.io/component-helpers":         "v0.30.3",
		"k8s.io/kubectl":                   "v0.30.3",
		"k8s.io/utils":                     "v0.0.0-20240711033017-18e509b52bc8",
		"sigs.k8s.io/controller-runtime":   "v0.18.5",
		"sigs.k8s.io/yaml":                 "v1.4.0",
		"github.com/redpanda-data/redpanda-operator/gotohelm": "v1.1.0",
	}

	modPaths, err := filepath.Glob("../../*/go.mod")
	require.NoError(t, err)

	chartsModPaths, err := filepath.Glob("../../*/*/go.mod")
	require.NoError(t, err)

	modPaths = append(modPaths, chartsModPaths...)

	// Parse all go.mods.
	modFiles := make([]*modfile.File, len(modPaths))
	for i, path := range modPaths {
		modData, err := os.ReadFile(path)
		require.NoError(t, err)

		modFiles[i], err = modfile.Parse(path[len("../../"):], modData, func(path, version string) (string, error) {
			return version, nil
		})
		require.NoError(t, err)
	}

	for _, modFile := range modFiles {
		assert.Equalf(t, runtime.Version()[2:], modFile.Go.Version, "%s's go directive should be match runtime.Version(): %q", modFile.Module.Mod.Path, runtime.Version()[2:])

		for _, r := range modFile.Require {
			if strings.HasPrefix(r.Mod.Path, modPrefix) {
				assertPresentInMainOrRelease(t, modFile, r.Mod)
			}

			if version, ok := workspaceWideVersions[r.Mod.Path]; ok {
				assert.Equalf(t, version, r.Mod.Version, `
%s MUST be %s across the all go.mod's in this repository.

	%s is using %s

Quick Fixes:

	go get %s@%s
	go mod edit -require=%s@%s
	%s %s

If this was an intentional version change, apply it to all go.mod's and update the workspaceWideVersions variable in this linter.
`, r.Mod.Path, version, modFile.Module.Mod.Path, r.Mod.Version, r.Mod.Path, version, r.Mod.Path, version, r.Mod.Path, version)
			}
		}

		// For replaces, only check the replacement as we may not have much
		// choice about the decided version.
		for _, r := range modFile.Replace {
			if strings.HasPrefix(r.New.Path, modPrefix) {
				assertPresentInMainOrRelease(t, modFile, r.New)
			}
		}

		for _, r := range modFile.Replace {
			if !modfile.IsDirectoryPath(r.New.Path) {
				continue
			}

			if slices.Contains(permittedReplaces[modFile.Module.Mod.Path], r.Old.Path) {
				continue
			}

			t.Errorf(`
Replace directives specifying paths are not allowed.

	%s: %q => %q

A go.work may be used to test local changes.
Cross module changes MUST be performed via multiple commits (PRs) to main or release/*.

`, modFile.Module.Mod, r.Old.Path, r.New.Path)
		}
	}
}

func assertPresentInMainOrRelease(t *testing.T, modFile *modfile.File, version module.Version) {
	// Versions come in the form v1.2.3 OR
	// v0.0.0-20250122184213-86ba034147e9 v1.2.3 must be a tag in the
	// git repo, so no need to check that. Otherwise, we'll extract the
	// SHA and assert that the commit is in the main or release/*
	// branches.
	spl := strings.Split(version.Version, "-")
	if len(spl) != 3 {
		return
	}

	// Sometimes a version is all zeros due to a replace directive. Skip those
	// as they'll be checked by the replace directive checks.
	if spl[2] == "000000000000" {
		return
	}

	if !presentInMainOrRelease(spl[2]) {
		t.Errorf(`
Dependencies on commits from github.com/redpanda-data/redpanda-operator modules MUST be present in main, release/*, or be a git tag.

%s: %q

%s could not be resolved via git merge-base --is-ancestor %s <acceptable-branches>

`, modFile.Module.Mod.Path, version.String(), spl[2], spl[2])
	}
}

var (
	releaseFetchOnce sync.Once
	fetchErr         error
)

func fetchReleaseBranch(branch string) bool {
	releaseFetchOnce.Do(func() {
		fetchErr = exec.Command("git", "fetch", "origin", branch).Run()
	})

	return fetchErr == nil
}

func presentInMainOrRelease(shortSha string) bool {
	isAncestor := func(ancestor, commitish string) bool {
		err := exec.Command("git", "merge-base", "--is-ancestor", ancestor, commitish).Run()
		return err == nil
	}
	if releaseBranch != "" && fetchReleaseBranch(releaseBranch) && isAncestor(shortSha, "origin/"+releaseBranch) {
		return true
	}
	return isAncestor(shortSha, "main")
}
