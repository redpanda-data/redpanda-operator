// Copyright 2025 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

package lint

import (
	"bytes"
	"fmt"
	"io/fs"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"golang.org/x/mod/modfile"
	"sigs.k8s.io/yaml"

	"github.com/redpanda-data/redpanda-operator/pkg/testutil"
)

type ChartYAML struct {
	Version     string            `json:"version"`
	AppVersion  string            `json:"appVersion"`
	Annotations map[string]string `json:"annotations"`
}

func TestToolVersions(t *testing.T) {
	golden := testutil.NewTxTar(t, "testdata/tool-versions.txtar")

	for _, cmd := range []string{
		"go version | cut -d ' ' -f 1-3", // cut removes os/arch
		"helm version",
		"k3d version",
		"kind version | cut -d ' ' -f 1-3", // cut removes os/arch
		"kubectl version --client=true",
		"kustomize version",
		"kuttl version | cut -d ' ' -f 1-7", // cut removes os/arch
		"task --version",
		"yq --version",
		"helm-docs -v",
		"changie --version",
		"aws --version | cut -d ' ' -f 1-2", // cut removes os/arch
	} {
		out := sh(cmd)
		bin := strings.SplitN(cmd, " ", 2)[0]
		expect := fmt.Sprintf("# %s\n%s\n", cmd, out)
		golden.AssertGolden(t, testutil.Text, bin, []byte(expect))
	}
}

func sh(cmd string) string {
	out, err := exec.Command("sh", "-c", cmd).CombinedOutput()
	if err != nil {
		return fmt.Sprintf("ERROR: %s\n%s", err.Error(), out)
	}
	return string(out)
}

func TestChartYAMLVersions(t *testing.T) {
	chartYAMLs, err := fs.Glob(os.DirFS("../.."), "charts/*/Chart.yaml")
	require.NoError(t, err)

	for _, chartYAML := range chartYAMLs {
		changeLogPath := filepath.Join("../..", filepath.Dir(chartYAML), "CHANGELOG.md")

		chartBytes, err := os.ReadFile("../../" + chartYAML)
		require.NoError(t, err)

		changelog, err := os.ReadFile(changeLogPath)
		require.NoError(t, err)

		var chart map[string]any
		require.NoError(t, yaml.Unmarshal(chartBytes, &chart))

		chartName := chart["name"].(string)
		chartVersion := chart["version"].(string)

		// Headers generated by changie
		releaseHeader1 := fmt.Sprintf("## v%s - ", chartVersion)
		releaseHeader2 := fmt.Sprintf("## [v%s](", chartVersion)
		// Headers that were used prior to changie.
		releaseHeader3 := fmt.Sprintf("## [%s](", chartVersion)

		hasHeader := false
		hasHeader = hasHeader || bytes.Contains(changelog, []byte(releaseHeader1))
		hasHeader = hasHeader || bytes.Contains(changelog, []byte(releaseHeader2))
		hasHeader = hasHeader || bytes.Contains(changelog, []byte(releaseHeader3))

		// require.Contains is noisy with a large file. Fallback to
		// require.True for friendlier messages.
		assert.Truef(
			t,
			hasHeader,
			"%s's CHANGELOG.md is missing the release header for %s\nDid you forget to run changie batch?\nLooked for %q or %q",
			chartName,
			chartVersion,
			releaseHeader1,
			releaseHeader2,
		)
	}
}

type BranchesYAML struct {
	Active []string `json:"active"`
}

type BackportRC struct {
	TargetBranchChoices []string `json:"targetBranchChoices"`
}

func TestBranches(t *testing.T) {
	branches := unmarshalFileInto[BranchesYAML](t, "../../.github/branches.yml")
	backportrc := unmarshalFileInto[BackportRC](t, "../../.backportrc.json")
	readmeMD, err := os.ReadFile("../../README.md")
	require.NoError(t, err)

	// NB: `main` is present in active branches but isn't a backport target.
	assert.Equal(t, branches.Active[1:], backportrc.TargetBranchChoices, ".github/branches.yml's active field should equal targetBranchChoices of .backportrc.json")

	for _, branch := range branches.Active {
		link := fmt.Sprintf("[`%s`](https://github.com/redpanda-data/redpanda-operator/tree/%s)", branch, branch)
		assert.Contains(t, string(readmeMD), link, "Did you forget to add %q to README.md?", branch)
	}
}

func unmarshalFileInto[T any](t *testing.T, name string) T {
	var out T
	bytes, err := os.ReadFile(name)
	require.NoError(t, err)
	require.NoError(t, yaml.Unmarshal(bytes, &out))
	return out
}

// TestGoModLint parses most go.mod files in this repository and verifies that
// intra-repository module dependencies follow the allowed model. This ensures
// consistent behavior with or without go.mod and prevent technically
// permissible circular dependencies.
func TestGoModLint(t *testing.T) {
	const modPrefix = "github.com/redpanda-data/redpanda-operator/"

	// Gotohelm is only ever hosted in the main branch. It is NOT replaced
	// within any of our modules.

	// module -> allowed deps -> replace required.
	localDeps := map[string]map[string]bool{
		// Connectors is mildly abandoned. For that reason we don't both
		// enforcing replacement rules.
		modPrefix + "charts/connectors": {
			modPrefix + "pkg":      false,
			modPrefix + "gotohelm": false,
		},

		modPrefix + "charts/console/v3": {
			modPrefix + "pkg":      true,
			modPrefix + "gotohelm": false,
		},

		modPrefix + "charts/redpanda/v25": {
			modPrefix + "charts/console/v3": true,
			modPrefix + "gotohelm":          false,
			modPrefix + "pkg":               true,
		},

		// To allow go run'ing  gotohelm, it does not use replace directives.
		modPrefix + "gotohelm": {
			modPrefix + "pkg": false,
		},

		modPrefix + "harpoon": {
			modPrefix + "pkg": true,
		},

		modPrefix + "acceptance": {
			modPrefix + "charts/console/v3":   true,
			modPrefix + "charts/redpanda/v25": true,
			modPrefix + "harpoon":             true,
			modPrefix + "operator":            true,
			modPrefix + "pkg":                 true,
			modPrefix + "gotohelm":            false,
		},

		modPrefix + "gen": {
			modPrefix + "charts/console/v3":   true,
			modPrefix + "charts/redpanda/v25": true,
			modPrefix + "gotohelm":            false,
			modPrefix + "operator":            true,
			modPrefix + "pkg":                 true,
		},

		modPrefix + "operator": {
			// An older version of console is used for tests as it's the API
			// used by the v1alpha2 CRD.
			modPrefix + "charts/console":      false,
			modPrefix + "charts/console/v3":   true,
			modPrefix + "charts/redpanda/v25": true,
			modPrefix + "gotohelm":            false,
			modPrefix + "pkg":                 true,
		},
	}

	modPaths, err := filepath.Glob("../../*/go.mod")
	require.NoError(t, err)

	chartsModPaths, err := filepath.Glob("../../*/*/go.mod")
	require.NoError(t, err)

	modPaths = append(modPaths, chartsModPaths...)

	// Parse all go.mods.
	modFiles := make([]*modfile.File, len(modPaths))
	for i, path := range modPaths {
		modData, err := os.ReadFile(path)
		require.NoError(t, err)

		modFiles[i], err = modfile.Parse(path[len("../../"):], modData, func(path, version string) (string, error) {
			return version, nil
		})
		require.NoError(t, err)
	}

	for _, modFile := range modFiles {
		localReferences := map[string]struct{}{}
		for _, r := range modFile.Require {
			if !strings.HasPrefix(r.Mod.Path, modPrefix) {
				continue
			}
			localReferences[r.Mod.Path] = struct{}{}
		}

		for localref := range localReferences {
			if _, ok := localDeps[modFile.Module.Mod.Path][localref]; ok {
				continue
			}
			t.Errorf("Dependency not permitted:\n%s => %s\n\n", modFile.Module.Mod.Path, localref)
		}

		// For replaces, only check the replacement as we may not have much
		// choice about the decided version.
		for _, r := range modFile.Replace {
			if !strings.HasPrefix(r.Old.Path, modPrefix) {
				continue
			}
			delete(localReferences, r.Old.Path)
		}

		for localref := range localReferences {
			if !localDeps[modFile.Module.Mod.Path][localref] {
				continue
			}
			t.Errorf("Dependency MUST have replace direct specified in go.mod:\n%s => %s\n\n", modFile.Module.Mod.Path, localref)
		}
	}
}
